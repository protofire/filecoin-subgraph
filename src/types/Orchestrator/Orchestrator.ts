// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}


export class ActionCreated extends ethereum.Event {
  get params(): ActionCreated__Params {
    return new ActionCreated__Params(this);
  }
}

export class ActionCreated__Params {
  _event: ActionCreated;

  constructor(event: ActionCreated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get actionHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get targetAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get jobEpoch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }
}


export class ActionExecuted extends ethereum.Event {
  get params(): ActionExecuted__Params {
    return new ActionExecuted__Params(this);
  }
}

export class ActionExecuted__Params {
  _event: ActionExecuted;

  constructor(event: ActionExecuted) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewardPerAction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}


export class ActionFailed extends ethereum.Event {
  get params(): ActionFailed__Params {
    return new ActionFailed__Params(this);
  }
}

export class ActionFailed__Params {
  _event: ActionFailed;

  constructor(event: ActionFailed) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}


export class ActionRejected extends ethereum.Event {
  get params(): ActionRejected__Params {
    return new ActionRejected__Params(this);
  }
}

export class ActionRejected__Params {
  _event: ActionRejected;

  constructor(event: ActionRejected) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class vote extends ethereum.Event {
  get params(): vote__Params {
    return new vote__Params(this);
  }
}

export class vote__Params {
  _event: vote;

  constructor(event: vote) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Orchestrator__actionsResult {
  value0: Address;
  value1: Bytes;
  value2: i32;

  constructor(value0: Address, value1: Bytes, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }
}

export class Orchestrator__getActionInfoResult {
  value0: Array<Bytes>;
  value1: Array<Bytes>;
  value2: Address;
  value3: i32;

  constructor(
    value0: Array<Bytes>,
    value1: Array<Bytes>,
    value2: Address,
    value3: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromBytesArray(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }
}

export class Orchestrator extends ethereum.SmartContract {
  static bind(address: Address): Orchestrator {
    return new Orchestrator("Orchestrator", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  actionApprovalByUser(actionId: BigInt, _member: Address): i32 {
    let result = super.call(
      "actionApprovalByUser",
      "actionApprovalByUser(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(actionId),
        ethereum.Value.fromAddress(_member)
      ]
    );

    return result[0].toI32();
  }

  try_actionApprovalByUser(
    actionId: BigInt,
    _member: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "actionApprovalByUser",
      "actionApprovalByUser(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(actionId),
        ethereum.Value.fromAddress(_member)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  actionApprovalStatus(actionId: BigInt): i32 {
    let result = super.call(
      "actionApprovalStatus",
      "actionApprovalStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(actionId)]
    );

    return result[0].toI32();
  }

  try_actionApprovalStatus(actionId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "actionApprovalStatus",
      "actionApprovalStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(actionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  actionCount(): BigInt {
    let result = super.call("actionCount", "actionCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_actionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("actionCount", "actionCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  actionThresholdPercent(): i32 {
    let result = super.call(
      "actionThresholdPercent",
      "actionThresholdPercent():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_actionThresholdPercent(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "actionThresholdPercent",
      "actionThresholdPercent():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  action_approvals(param0: BigInt, param1: Address): i32 {
    let result = super.call(
      "action_approvals",
      "action_approvals(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toI32();
  }

  try_action_approvals(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "action_approvals",
      "action_approvals(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  actions(param0: BigInt): Orchestrator__actionsResult {
    let result = super.call(
      "actions",
      "actions(uint256):(address,bytes32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Orchestrator__actionsResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toI32()
    );
  }

  try_actions(
    param0: BigInt
  ): ethereum.CallResult<Orchestrator__actionsResult> {
    let result = super.tryCall(
      "actions",
      "actions(uint256):(address,bytes32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Orchestrator__actionsResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toI32()
      )
    );
  }

  approveAction(actionId: BigInt, _vote: i32): boolean {
    let result = super.call(
      "approveAction",
      "approveAction(uint256,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(actionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_vote))
      ]
    );

    return result[0].toBoolean();
  }

  try_approveAction(
    actionId: BigInt,
    _vote: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveAction",
      "approveAction(uint256,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(actionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_vote))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createAction(
    methods: Array<Bytes>,
    args: Array<Bytes>,
    targetAddress: Address,
    _hash: Bytes,
    _recipients: Array<Address>
  ): BigInt {
    let result = super.call(
      "createAction",
      "createAction(bytes4[],bytes[],address,bytes32,address[]):(uint256)",
      [
        ethereum.Value.fromFixedBytesArray(methods),
        ethereum.Value.fromBytesArray(args),
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromFixedBytes(_hash),
        ethereum.Value.fromAddressArray(_recipients)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAction(
    methods: Array<Bytes>,
    args: Array<Bytes>,
    targetAddress: Address,
    _hash: Bytes,
    _recipients: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAction",
      "createAction(bytes4[],bytes[],address,bytes32,address[]):(uint256)",
      [
        ethereum.Value.fromFixedBytesArray(methods),
        ethereum.Value.fromBytesArray(args),
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromFixedBytes(_hash),
        ethereum.Value.fromAddressArray(_recipients)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeAction(actionId: BigInt, dynamicData: Array<Bytes>): i32 {
    let result = super.call(
      "executeAction",
      "executeAction(uint256,bytes[]):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(actionId),
        ethereum.Value.fromBytesArray(dynamicData)
      ]
    );

    return result[0].toI32();
  }

  try_executeAction(
    actionId: BigInt,
    dynamicData: Array<Bytes>
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "executeAction",
      "executeAction(uint256,bytes[]):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(actionId),
        ethereum.Value.fromBytesArray(dynamicData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getActionInfo(actionId: BigInt): Orchestrator__getActionInfoResult {
    let result = super.call(
      "getActionInfo",
      "getActionInfo(uint256):(bytes4[],bytes[],address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(actionId)]
    );

    return new Orchestrator__getActionInfoResult(
      result[0].toBytesArray(),
      result[1].toBytesArray(),
      result[2].toAddress(),
      result[3].toI32()
    );
  }

  try_getActionInfo(
    actionId: BigInt
  ): ethereum.CallResult<Orchestrator__getActionInfoResult> {
    let result = super.tryCall(
      "getActionInfo",
      "getActionInfo(uint256):(bytes4[],bytes[],address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(actionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Orchestrator__getActionInfoResult(
        value[0].toBytesArray(),
        value[1].toBytesArray(),
        value[2].toAddress(),
        value[3].toI32()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPerAction(): BigInt {
    let result = super.call(
      "rewardPerAction",
      "rewardPerAction():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerAction(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerAction",
      "rewardPerAction():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AdminCall extends ethereum.Call {
  get inputs(): AdminCall__Inputs {
    return new AdminCall__Inputs(this);
  }

  get outputs(): AdminCall__Outputs {
    return new AdminCall__Outputs(this);
  }
}

export class AdminCall__Inputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }
}

export class AdminCall__Outputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class ImplementationCall extends ethereum.Call {
  get inputs(): ImplementationCall__Inputs {
    return new ImplementationCall__Inputs(this);
  }

  get outputs(): ImplementationCall__Outputs {
    return new ImplementationCall__Outputs(this);
  }
}

export class ImplementationCall__Inputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }
}

export class ImplementationCall__Outputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class _executeActionCall extends ethereum.Call {
  get inputs(): _executeActionCall__Inputs {
    return new _executeActionCall__Inputs(this);
  }

  get outputs(): _executeActionCall__Outputs {
    return new _executeActionCall__Outputs(this);
  }
}

export class _executeActionCall__Inputs {
  _call: _executeActionCall;

  constructor(call: _executeActionCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dynamicData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class _executeActionCall__Outputs {
  _call: _executeActionCall;

  constructor(call: _executeActionCall) {
    this._call = call;
  }
}

export class ApproveActionCall extends ethereum.Call {
  get inputs(): ApproveActionCall__Inputs {
    return new ApproveActionCall__Inputs(this);
  }

  get outputs(): ApproveActionCall__Outputs {
    return new ApproveActionCall__Outputs(this);
  }
}

export class ApproveActionCall__Inputs {
  _call: ApproveActionCall;

  constructor(call: ApproveActionCall) {
    this._call = call;
  }

  get actionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _vote(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ApproveActionCall__Outputs {
  _call: ApproveActionCall;

  constructor(call: ApproveActionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateActionCall extends ethereum.Call {
  get inputs(): CreateActionCall__Inputs {
    return new CreateActionCall__Inputs(this);
  }

  get outputs(): CreateActionCall__Outputs {
    return new CreateActionCall__Outputs(this);
  }
}

export class CreateActionCall__Inputs {
  _call: CreateActionCall;

  constructor(call: CreateActionCall) {
    this._call = call;
  }

  get methods(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get args(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get targetAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _hash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _recipients(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class CreateActionCall__Outputs {
  _call: CreateActionCall;

  constructor(call: CreateActionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteActionCall extends ethereum.Call {
  get inputs(): ExecuteActionCall__Inputs {
    return new ExecuteActionCall__Inputs(this);
  }

  get outputs(): ExecuteActionCall__Outputs {
    return new ExecuteActionCall__Outputs(this);
  }
}

export class ExecuteActionCall__Inputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get actionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dynamicData(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class ExecuteActionCall__Outputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _keeperRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardPerAction(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetGasVaultCall extends ethereum.Call {
  get inputs(): SetGasVaultCall__Inputs {
    return new SetGasVaultCall__Inputs(this);
  }

  get outputs(): SetGasVaultCall__Outputs {
    return new SetGasVaultCall__Outputs(this);
  }
}

export class SetGasVaultCall__Inputs {
  _call: SetGasVaultCall;

  constructor(call: SetGasVaultCall) {
    this._call = call;
  }

  get _gasVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGasVaultCall__Outputs {
  _call: SetGasVaultCall;

  constructor(call: SetGasVaultCall) {
    this._call = call;
  }
}

export class SetRewardPerRequestCall extends ethereum.Call {
  get inputs(): SetRewardPerRequestCall__Inputs {
    return new SetRewardPerRequestCall__Inputs(this);
  }

  get outputs(): SetRewardPerRequestCall__Outputs {
    return new SetRewardPerRequestCall__Outputs(this);
  }
}

export class SetRewardPerRequestCall__Inputs {
  _call: SetRewardPerRequestCall;

  constructor(call: SetRewardPerRequestCall) {
    this._call = call;
  }

  get _rewardPerAction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardPerRequestCall__Outputs {
  _call: SetRewardPerRequestCall;

  constructor(call: SetRewardPerRequestCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}


