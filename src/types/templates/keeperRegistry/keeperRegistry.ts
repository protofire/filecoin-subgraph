// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class leaveQueued extends ethereum.Event {
  get params(): leaveQueued__Params {
    return new leaveQueued__Params(this);
  }
}

export class leaveQueued__Params {
  _event: leaveQueued;

  constructor(event: leaveQueued) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class permissionChanged extends ethereum.Event {
  get params(): permissionChanged__Params {
    return new permissionChanged__Params(this);
  }
}

export class permissionChanged__Params {
  _event: permissionChanged;

  constructor(event: permissionChanged) {
    this._event = event;
  }

  get _subject(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _permissionType(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class keeperRegistry extends ethereum.SmartContract {
  static bind(address: Address): keeperRegistry {
    return new keeperRegistry("keeperRegistry", address);
  }

  bondCoin(): Address {
    let result = super.call("bondCoin", "bondCoin():(address)", []);

    return result[0].toAddress();
  }

  try_bondCoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("bondCoin", "bondCoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cancelLeave(): boolean {
    let result = super.call("cancelLeave", "cancelLeave():(bool)", []);

    return result[0].toBoolean();
  }

  try_cancelLeave(): ethereum.CallResult<boolean> {
    let result = super.tryCall("cancelLeave", "cancelLeave():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  firstEmptyKeeperIndex(): i32 {
    let result = super.call(
      "firstEmptyKeeperIndex",
      "firstEmptyKeeperIndex():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_firstEmptyKeeperIndex(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "firstEmptyKeeperIndex",
      "firstEmptyKeeperIndex():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  freeCoin(): BigInt {
    let result = super.call("freeCoin", "freeCoin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_freeCoin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("freeCoin", "freeCoin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRegisteredKeepers(): Array<Address> {
    let result = super.call(
      "getRegisteredKeepers",
      "getRegisteredKeepers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getRegisteredKeepers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRegisteredKeepers",
      "getRegisteredKeepers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isKeeper(): boolean {
    let result = super.call("isKeeper", "isKeeper():(bool)", []);

    return result[0].toBoolean();
  }

  try_isKeeper(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKeeper", "isKeeper():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isKeeper1(arbitraryAddress: Address): boolean {
    let result = super.call("isKeeper", "isKeeper(address):(bool)", [
      ethereum.Value.fromAddress(arbitraryAddress)
    ]);

    return result[0].toBoolean();
  }

  try_isKeeper1(arbitraryAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKeeper", "isKeeper(address):(bool)", [
      ethereum.Value.fromAddress(arbitraryAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  join(ver: i32): boolean {
    let result = super.call("join", "join(uint16):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ver))
    ]);

    return result[0].toBoolean();
  }

  try_join(ver: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("join", "join(uint16):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ver))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  leave(): boolean {
    let result = super.call("leave", "leave():(bool)", []);

    return result[0].toBoolean();
  }

  try_leave(): ethereum.CallResult<boolean> {
    let result = super.tryCall("leave", "leave():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxNumKeepers(): i32 {
    let result = super.call("maxNumKeepers", "maxNumKeepers():(uint16)", []);

    return result[0].toI32();
  }

  try_maxNumKeepers(): ethereum.CallResult<i32> {
    let result = super.tryCall("maxNumKeepers", "maxNumKeepers():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registeredKeepers(param0: BigInt): Address {
    let result = super.call(
      "registeredKeepers",
      "registeredKeepers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_registeredKeepers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registeredKeepers",
      "registeredKeepers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferDelay(): BigInt {
    let result = super.call("transferDelay", "transferDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_transferDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferDelay",
      "transferDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferRequests(param0: Address): BigInt {
    let result = super.call(
      "transferRequests",
      "transferRequests(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_transferRequests(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferRequests",
      "transferRequests(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CancelLeaveCall extends ethereum.Call {
  get inputs(): CancelLeaveCall__Inputs {
    return new CancelLeaveCall__Inputs(this);
  }

  get outputs(): CancelLeaveCall__Outputs {
    return new CancelLeaveCall__Outputs(this);
  }
}

export class CancelLeaveCall__Inputs {
  _call: CancelLeaveCall;

  constructor(call: CancelLeaveCall) {
    this._call = call;
  }
}

export class CancelLeaveCall__Outputs {
  _call: CancelLeaveCall;

  constructor(call: CancelLeaveCall) {
    this._call = call;
  }

  get successfulCancel(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DenounceCall extends ethereum.Call {
  get inputs(): DenounceCall__Inputs {
    return new DenounceCall__Inputs(this);
  }

  get outputs(): DenounceCall__Outputs {
    return new DenounceCall__Outputs(this);
  }
}

export class DenounceCall__Inputs {
  _call: DenounceCall;

  constructor(call: DenounceCall) {
    this._call = call;
  }

  get arbitraryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenounceCall__Outputs {
  _call: DenounceCall;

  constructor(call: DenounceCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get coinAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get keeperTransferDelay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxKeepers(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get bondSize(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get ver(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LeaveCall extends ethereum.Call {
  get inputs(): LeaveCall__Inputs {
    return new LeaveCall__Inputs(this);
  }

  get outputs(): LeaveCall__Outputs {
    return new LeaveCall__Outputs(this);
  }
}

export class LeaveCall__Inputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }
}

export class LeaveCall__Outputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class QueueToLeaveCall extends ethereum.Call {
  get inputs(): QueueToLeaveCall__Inputs {
    return new QueueToLeaveCall__Inputs(this);
  }

  get outputs(): QueueToLeaveCall__Outputs {
    return new QueueToLeaveCall__Outputs(this);
  }
}

export class QueueToLeaveCall__Inputs {
  _call: QueueToLeaveCall;

  constructor(call: QueueToLeaveCall) {
    this._call = call;
  }
}

export class QueueToLeaveCall__Outputs {
  _call: QueueToLeaveCall;

  constructor(call: QueueToLeaveCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawFreeCoinCall extends ethereum.Call {
  get inputs(): WithdrawFreeCoinCall__Inputs {
    return new WithdrawFreeCoinCall__Inputs(this);
  }

  get outputs(): WithdrawFreeCoinCall__Outputs {
    return new WithdrawFreeCoinCall__Outputs(this);
  }
}

export class WithdrawFreeCoinCall__Inputs {
  _call: WithdrawFreeCoinCall;

  constructor(call: WithdrawFreeCoinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFreeCoinCall__Outputs {
  _call: WithdrawFreeCoinCall;

  constructor(call: WithdrawFreeCoinCall) {
    this._call = call;
  }
}
