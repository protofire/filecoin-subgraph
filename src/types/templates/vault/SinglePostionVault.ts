// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
    ethereum,
    JSONValue,
    TypedMap,
    Entity,
    Bytes,
    Address,
    BigInt
  } from "@graphprotocol/graph-ts";
  
  export class Approval extends ethereum.Event {
    get params(): Approval__Params {
      return new Approval__Params(this);
    }
  }
  
  export class Approval__Params {
    _event: Approval;
  
    constructor(event: Approval) {
      this._event = event;
    }
  
    get owner(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get spender(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get value(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  }
  
  export class Deposit extends ethereum.Event {
    get params(): Deposit__Params {
      return new Deposit__Params(this);
    }
  }
  
  export class Deposit__Params {
    _event: Deposit;
  
    constructor(event: Deposit) {
      this._event = event;
    }
  
    get sender(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get to(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get shares(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  
    get amount0(): BigInt {
      return this._event.parameters[3].value.toBigInt();
    }
  
    get amount1(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  }
  
  export class FeesEarned extends ethereum.Event {
    get params(): FeesEarned__Params {
      return new FeesEarned__Params(this);
    }
  }
  
  export class FeesEarned__Params {
    _event: FeesEarned;
  
    constructor(event: FeesEarned) {
      this._event = event;
    }
  
    get amount0Earned(): BigInt {
      return this._event.parameters[0].value.toBigInt();
    }
  
    get amount1Earned(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  }
  
  export class Paused extends ethereum.Event {
    get params(): Paused__Params {
      return new Paused__Params(this);
    }
  }
  
  export class Paused__Params {
    _event: Paused;
  
    constructor(event: Paused) {
      this._event = event;
    }
  
    get account(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  }
  
  export class RoleAdminChanged extends ethereum.Event {
    get params(): RoleAdminChanged__Params {
      return new RoleAdminChanged__Params(this);
    }
  }
  
  export class RoleAdminChanged__Params {
    _event: RoleAdminChanged;
  
    constructor(event: RoleAdminChanged) {
      this._event = event;
    }
  
    get role(): Bytes {
      return this._event.parameters[0].value.toBytes();
    }
  
    get previousAdminRole(): Bytes {
      return this._event.parameters[1].value.toBytes();
    }
  
    get newAdminRole(): Bytes {
      return this._event.parameters[2].value.toBytes();
    }
  }
  
  export class RoleGranted extends ethereum.Event {
    get params(): RoleGranted__Params {
      return new RoleGranted__Params(this);
    }
  }
  
  export class RoleGranted__Params {
    _event: RoleGranted;
  
    constructor(event: RoleGranted) {
      this._event = event;
    }
  
    get role(): Bytes {
      return this._event.parameters[0].value.toBytes();
    }
  
    get account(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get sender(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  }
  
  export class RoleRevoked extends ethereum.Event {
    get params(): RoleRevoked__Params {
      return new RoleRevoked__Params(this);
    }
  }
  
  export class RoleRevoked__Params {
    _event: RoleRevoked;
  
    constructor(event: RoleRevoked) {
      this._event = event;
    }
  
    get role(): Bytes {
      return this._event.parameters[0].value.toBytes();
    }
  
    get account(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get sender(): Address {
      return this._event.parameters[2].value.toAddress();
    }
  }
  
  export class Snapshot extends ethereum.Event {
    get params(): Snapshot__Params {
      return new Snapshot__Params(this);
    }
  }
  
  export class Snapshot__Params {
    _event: Snapshot;
  
    constructor(event: Snapshot) {
      this._event = event;
    }
  
    get sqrtPriceX96(): BigInt {
      return this._event.parameters[0].value.toBigInt();
    }
  
    get totalAmount0(): BigInt {
      return this._event.parameters[1].value.toBigInt();
    }
  
    get totalAmount1(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  
    get totalSupply(): BigInt {
      return this._event.parameters[3].value.toBigInt();
    }
  }
  
  export class Transfer extends ethereum.Event {
    get params(): Transfer__Params {
      return new Transfer__Params(this);
    }
  }
  
  export class Transfer__Params {
    _event: Transfer;
  
    constructor(event: Transfer) {
      this._event = event;
    }
  
    get from(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get to(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get value(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  }
  
  export class Unpaused extends ethereum.Event {
    get params(): Unpaused__Params {
      return new Unpaused__Params(this);
    }
  }
  
  export class Unpaused__Params {
    _event: Unpaused;
  
    constructor(event: Unpaused) {
      this._event = event;
    }
  
    get account(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  }
  
  export class Withdraw extends ethereum.Event {
    get params(): Withdraw__Params {
      return new Withdraw__Params(this);
    }
  }
  
  export class Withdraw__Params {
    _event: Withdraw;
  
    constructor(event: Withdraw) {
      this._event = event;
    }
  
    get sender(): Address {
      return this._event.parameters[0].value.toAddress();
    }
  
    get to(): Address {
      return this._event.parameters[1].value.toAddress();
    }
  
    get shares(): BigInt {
      return this._event.parameters[2].value.toBigInt();
    }
  
    get amount0(): BigInt {
      return this._event.parameters[3].value.toBigInt();
    }
  
    get amount1(): BigInt {
      return this._event.parameters[4].value.toBigInt();
    }
  }
  
  export class Vault__depositResult {
    value0: BigInt;
    value1: BigInt;
    value2: BigInt;
  
    constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
      return map;
    }
  }
  
  export class Vault__emergencyBurnResult {
    value0: BigInt;
    value1: BigInt;
  
    constructor(value0: BigInt, value1: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      return map;
    }
  }
  
  export class Vault__getTotalAmountsResult {
    value0: BigInt;
    value1: BigInt;
  
    constructor(value0: BigInt, value1: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      return map;
    }
  }
  
  export class Vault__withdrawResult {
    value0: BigInt;
    value1: BigInt;
  
    constructor(value0: BigInt, value1: BigInt) {
      this.value0 = value0;
      this.value1 = value1;
    }
  
    toMap(): TypedMap<string, ethereum.Value> {
      let map = new TypedMap<string, ethereum.Value>();
      map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
      map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
      return map;
    }
  }
  
  export class Vault extends ethereum.SmartContract {
    static bind(address: Address): Vault {
      return new Vault("Vault", address);
    }
  
    DEFAULT_ADMIN_ROLE(): Bytes {
      let result = super.call(
        "DEFAULT_ADMIN_ROLE",
        "DEFAULT_ADMIN_ROLE():(bytes32)",
        []
      );
  
      return result[0].toBytes();
    }
  
    try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
      let result = super.tryCall(
        "DEFAULT_ADMIN_ROLE",
        "DEFAULT_ADMIN_ROLE():(bytes32)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBytes());
    }
  
    STEER_FRACTION_OF_FEE(): i32 {
      let result = super.call(
        "STEER_FRACTION_OF_FEE",
        "STEER_FRACTION_OF_FEE():(uint24)",
        []
      );
  
      return result[0].toI32();
    }
  
    try_STEER_FRACTION_OF_FEE(): ethereum.CallResult<i32> {
      let result = super.tryCall(
        "STEER_FRACTION_OF_FEE",
        "STEER_FRACTION_OF_FEE():(uint24)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toI32());
    }
  
    TOTAL_FEE(): i32 {
      let result = super.call("TOTAL_FEE", "TOTAL_FEE():(uint24)", []);
  
      return result[0].toI32();
    }
  
    try_TOTAL_FEE(): ethereum.CallResult<i32> {
      let result = super.tryCall("TOTAL_FEE", "TOTAL_FEE():(uint24)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toI32());
    }
  
    accruedSteerFees0(): BigInt {
      let result = super.call(
        "accruedSteerFees0",
        "accruedSteerFees0():(uint256)",
        []
      );
  
      return result[0].toBigInt();
    }
  
    try_accruedSteerFees0(): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "accruedSteerFees0",
        "accruedSteerFees0():(uint256)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    accruedSteerFees1(): BigInt {
      let result = super.call(
        "accruedSteerFees1",
        "accruedSteerFees1():(uint256)",
        []
      );
  
      return result[0].toBigInt();
    }
  
    try_accruedSteerFees1(): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "accruedSteerFees1",
        "accruedSteerFees1():(uint256)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    accruedStrategistFees0(): BigInt {
      let result = super.call(
        "accruedStrategistFees0",
        "accruedStrategistFees0():(uint256)",
        []
      );
  
      return result[0].toBigInt();
    }
  
    try_accruedStrategistFees0(): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "accruedStrategistFees0",
        "accruedStrategistFees0():(uint256)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    accruedStrategistFees1(): BigInt {
      let result = super.call(
        "accruedStrategistFees1",
        "accruedStrategistFees1():(uint256)",
        []
      );
  
      return result[0].toBigInt();
    }
  
    try_accruedStrategistFees1(): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "accruedStrategistFees1",
        "accruedStrategistFees1():(uint256)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    allowance(owner: Address, spender: Address): BigInt {
      let result = super.call(
        "allowance",
        "allowance(address,address):(uint256)",
        [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
      );
  
      return result[0].toBigInt();
    }
  
    try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "allowance",
        "allowance(address,address):(uint256)",
        [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    approve(spender: Address, amount: BigInt): boolean {
      let result = super.call("approve", "approve(address,uint256):(bool)", [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]);
  
      return result[0].toBoolean();
    }
  
    try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
      let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    balanceOf(account: Address): BigInt {
      let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
        ethereum.Value.fromAddress(account)
      ]);
  
      return result[0].toBigInt();
    }
  
    try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
      let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
        ethereum.Value.fromAddress(account)
      ]);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    decimals(): i32 {
      let result = super.call("decimals", "decimals():(uint8)", []);
  
      return result[0].toI32();
    }
  
    try_decimals(): ethereum.CallResult<i32> {
      let result = super.tryCall("decimals", "decimals():(uint8)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toI32());
    }
  
    decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
      let result = super.call(
        "decreaseAllowance",
        "decreaseAllowance(address,uint256):(bool)",
        [
          ethereum.Value.fromAddress(spender),
          ethereum.Value.fromUnsignedBigInt(subtractedValue)
        ]
      );
  
      return result[0].toBoolean();
    }
  
    try_decreaseAllowance(
      spender: Address,
      subtractedValue: BigInt
    ): ethereum.CallResult<boolean> {
      let result = super.tryCall(
        "decreaseAllowance",
        "decreaseAllowance(address,uint256):(bool)",
        [
          ethereum.Value.fromAddress(spender),
          ethereum.Value.fromUnsignedBigInt(subtractedValue)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    deposit(
      amount0Desired: BigInt,
      amount1Desired: BigInt,
      amount0Min: BigInt,
      amount1Min: BigInt,
      to: Address
    ): Vault__depositResult {
      let result = super.call(
        "deposit",
        "deposit(uint256,uint256,uint256,uint256,address):(uint256,uint256,uint256)",
        [
          ethereum.Value.fromUnsignedBigInt(amount0Desired),
          ethereum.Value.fromUnsignedBigInt(amount1Desired),
          ethereum.Value.fromUnsignedBigInt(amount0Min),
          ethereum.Value.fromUnsignedBigInt(amount1Min),
          ethereum.Value.fromAddress(to)
        ]
      );
  
      return new Vault__depositResult(
        result[0].toBigInt(),
        result[1].toBigInt(),
        result[2].toBigInt()
      );
    }
  
    try_deposit(
      amount0Desired: BigInt,
      amount1Desired: BigInt,
      amount0Min: BigInt,
      amount1Min: BigInt,
      to: Address
    ): ethereum.CallResult<Vault__depositResult> {
      let result = super.tryCall(
        "deposit",
        "deposit(uint256,uint256,uint256,uint256,address):(uint256,uint256,uint256)",
        [
          ethereum.Value.fromUnsignedBigInt(amount0Desired),
          ethereum.Value.fromUnsignedBigInt(amount1Desired),
          ethereum.Value.fromUnsignedBigInt(amount0Min),
          ethereum.Value.fromUnsignedBigInt(amount1Min),
          ethereum.Value.fromAddress(to)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new Vault__depositResult(
          value[0].toBigInt(),
          value[1].toBigInt(),
          value[2].toBigInt()
        )
      );
    }
  
    emergencyBurn(
      tickLower: i32,
      tickUpper: i32,
      liquidity: BigInt
    ): Vault__emergencyBurnResult {
      let result = super.call(
        "emergencyBurn",
        "emergencyBurn(int24,int24,uint128):(uint256,uint256)",
        [
          ethereum.Value.fromI32(tickLower),
          ethereum.Value.fromI32(tickUpper),
          ethereum.Value.fromUnsignedBigInt(liquidity)
        ]
      );
  
      return new Vault__emergencyBurnResult(
        result[0].toBigInt(),
        result[1].toBigInt()
      );
    }
  
    try_emergencyBurn(
      tickLower: i32,
      tickUpper: i32,
      liquidity: BigInt
    ): ethereum.CallResult<Vault__emergencyBurnResult> {
      let result = super.tryCall(
        "emergencyBurn",
        "emergencyBurn(int24,int24,uint128):(uint256,uint256)",
        [
          ethereum.Value.fromI32(tickLower),
          ethereum.Value.fromI32(tickUpper),
          ethereum.Value.fromUnsignedBigInt(liquidity)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new Vault__emergencyBurnResult(value[0].toBigInt(), value[1].toBigInt())
      );
    }
  
    getRoleAdmin(role: Bytes): Bytes {
      let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
        ethereum.Value.fromFixedBytes(role)
      ]);
  
      return result[0].toBytes();
    }
  
    try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
      let result = super.tryCall(
        "getRoleAdmin",
        "getRoleAdmin(bytes32):(bytes32)",
        [ethereum.Value.fromFixedBytes(role)]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBytes());
    }
  
    getRoleMember(role: Bytes, index: BigInt): Address {
      let result = super.call(
        "getRoleMember",
        "getRoleMember(bytes32,uint256):(address)",
        [
          ethereum.Value.fromFixedBytes(role),
          ethereum.Value.fromUnsignedBigInt(index)
        ]
      );
  
      return result[0].toAddress();
    }
  
    try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
      let result = super.tryCall(
        "getRoleMember",
        "getRoleMember(bytes32,uint256):(address)",
        [
          ethereum.Value.fromFixedBytes(role),
          ethereum.Value.fromUnsignedBigInt(index)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toAddress());
    }
  
    getRoleMemberCount(role: Bytes): BigInt {
      let result = super.call(
        "getRoleMemberCount",
        "getRoleMemberCount(bytes32):(uint256)",
        [ethereum.Value.fromFixedBytes(role)]
      );
  
      return result[0].toBigInt();
    }
  
    try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "getRoleMemberCount",
        "getRoleMemberCount(bytes32):(uint256)",
        [ethereum.Value.fromFixedBytes(role)]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    getTotalAmounts(): Vault__getTotalAmountsResult {
      let result = super.call(
        "getTotalAmounts",
        "getTotalAmounts():(uint256,uint256)",
        []
      );
  
      return new Vault__getTotalAmountsResult(
        result[0].toBigInt(),
        result[1].toBigInt()
      );
    }
  
    try_getTotalAmounts(): ethereum.CallResult<Vault__getTotalAmountsResult> {
      let result = super.tryCall(
        "getTotalAmounts",
        "getTotalAmounts():(uint256,uint256)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new Vault__getTotalAmountsResult(value[0].toBigInt(), value[1].toBigInt())
      );
    }
  
    hasRole(role: Bytes, account: Address): boolean {
      let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromAddress(account)
      ]);
  
      return result[0].toBoolean();
    }
  
    try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
      let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromAddress(account)
      ]);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    increaseAllowance(spender: Address, addedValue: BigInt): boolean {
      let result = super.call(
        "increaseAllowance",
        "increaseAllowance(address,uint256):(bool)",
        [
          ethereum.Value.fromAddress(spender),
          ethereum.Value.fromUnsignedBigInt(addedValue)
        ]
      );
  
      return result[0].toBoolean();
    }
  
    try_increaseAllowance(
      spender: Address,
      addedValue: BigInt
    ): ethereum.CallResult<boolean> {
      let result = super.tryCall(
        "increaseAllowance",
        "increaseAllowance(address,uint256):(bool)",
        [
          ethereum.Value.fromAddress(spender),
          ethereum.Value.fromUnsignedBigInt(addedValue)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    lowerTick(): i32 {
      let result = super.call("lowerTick", "lowerTick():(int24)", []);
  
      return result[0].toI32();
    }
  
    try_lowerTick(): ethereum.CallResult<i32> {
      let result = super.tryCall("lowerTick", "lowerTick():(int24)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toI32());
    }
  
    maxTotalSupply(): BigInt {
      let result = super.call("maxTotalSupply", "maxTotalSupply():(uint256)", []);
  
      return result[0].toBigInt();
    }
  
    try_maxTotalSupply(): ethereum.CallResult<BigInt> {
      let result = super.tryCall(
        "maxTotalSupply",
        "maxTotalSupply():(uint256)",
        []
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    name(): string {
      let result = super.call("name", "name():(string)", []);
  
      return result[0].toString();
    }
  
    try_name(): ethereum.CallResult<string> {
      let result = super.tryCall("name", "name():(string)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toString());
    }
  
    paused(): boolean {
      let result = super.call("paused", "paused():(bool)", []);
  
      return result[0].toBoolean();
    }
  
    try_paused(): ethereum.CallResult<boolean> {
      let result = super.tryCall("paused", "paused():(bool)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    pool(): Address {
      let result = super.call("pool", "pool():(address)", []);
  
      return result[0].toAddress();
    }
  
    try_pool(): ethereum.CallResult<Address> {
      let result = super.tryCall("pool", "pool():(address)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toAddress());
    }
  
    symbol(): string {
      let result = super.call("symbol", "symbol():(string)", []);
  
      return result[0].toString();
    }
  
    try_symbol(): ethereum.CallResult<string> {
      let result = super.tryCall("symbol", "symbol():(string)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toString());
    }
  
    token0(): Address {
      let result = super.call("token0", "token0():(address)", []);
  
      return result[0].toAddress();
    }
  
    try_token0(): ethereum.CallResult<Address> {
      let result = super.tryCall("token0", "token0():(address)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toAddress());
    }
  
    token1(): Address {
      let result = super.call("token1", "token1():(address)", []);
  
      return result[0].toAddress();
    }
  
    try_token1(): ethereum.CallResult<Address> {
      let result = super.tryCall("token1", "token1():(address)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toAddress());
    }
  
    totalSupply(): BigInt {
      let result = super.call("totalSupply", "totalSupply():(uint256)", []);
  
      return result[0].toBigInt();
    }
  
    try_totalSupply(): ethereum.CallResult<BigInt> {
      let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBigInt());
    }
  
    transfer(recipient: Address, amount: BigInt): boolean {
      let result = super.call("transfer", "transfer(address,uint256):(bool)", [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]);
  
      return result[0].toBoolean();
    }
  
    try_transfer(
      recipient: Address,
      amount: BigInt
    ): ethereum.CallResult<boolean> {
      let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
      let result = super.call(
        "transferFrom",
        "transferFrom(address,address,uint256):(bool)",
        [
          ethereum.Value.fromAddress(sender),
          ethereum.Value.fromAddress(recipient),
          ethereum.Value.fromUnsignedBigInt(amount)
        ]
      );
  
      return result[0].toBoolean();
    }
  
    try_transferFrom(
      sender: Address,
      recipient: Address,
      amount: BigInt
    ): ethereum.CallResult<boolean> {
      let result = super.tryCall(
        "transferFrom",
        "transferFrom(address,address,uint256):(bool)",
        [
          ethereum.Value.fromAddress(sender),
          ethereum.Value.fromAddress(recipient),
          ethereum.Value.fromUnsignedBigInt(amount)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toBoolean());
    }
  
    upperTick(): i32 {
      let result = super.call("upperTick", "upperTick():(int24)", []);
  
      return result[0].toI32();
    }
  
    try_upperTick(): ethereum.CallResult<i32> {
      let result = super.tryCall("upperTick", "upperTick():(int24)", []);
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(value[0].toI32());
    }
  
    withdraw(
      shares: BigInt,
      amount0Min: BigInt,
      amount1Min: BigInt,
      to: Address
    ): Vault__withdrawResult {
      let result = super.call(
        "withdraw",
        "withdraw(uint256,uint256,uint256,address):(uint256,uint256)",
        [
          ethereum.Value.fromUnsignedBigInt(shares),
          ethereum.Value.fromUnsignedBigInt(amount0Min),
          ethereum.Value.fromUnsignedBigInt(amount1Min),
          ethereum.Value.fromAddress(to)
        ]
      );
  
      return new Vault__withdrawResult(
        result[0].toBigInt(),
        result[1].toBigInt()
      );
    }
  
    try_withdraw(
      shares: BigInt,
      amount0Min: BigInt,
      amount1Min: BigInt,
      to: Address
    ): ethereum.CallResult<Vault__withdrawResult> {
      let result = super.tryCall(
        "withdraw",
        "withdraw(uint256,uint256,uint256,address):(uint256,uint256)",
        [
          ethereum.Value.fromUnsignedBigInt(shares),
          ethereum.Value.fromUnsignedBigInt(amount0Min),
          ethereum.Value.fromUnsignedBigInt(amount1Min),
          ethereum.Value.fromAddress(to)
        ]
      );
      if (result.reverted) {
        return new ethereum.CallResult();
      }
      let value = result.value;
      return ethereum.CallResult.fromValue(
        new Vault__withdrawResult(value[0].toBigInt(), value[1].toBigInt())
      );
    }
  }
  
  export class ApproveCall extends ethereum.Call {
    get inputs(): ApproveCall__Inputs {
      return new ApproveCall__Inputs(this);
    }
  
    get outputs(): ApproveCall__Outputs {
      return new ApproveCall__Outputs(this);
    }
  }
  
  export class ApproveCall__Inputs {
    _call: ApproveCall;
  
    constructor(call: ApproveCall) {
      this._call = call;
    }
  
    get spender(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  }
  
  export class ApproveCall__Outputs {
    _call: ApproveCall;
  
    constructor(call: ApproveCall) {
      this._call = call;
    }
  
    get value0(): boolean {
      return this._call.outputValues[0].value.toBoolean();
    }
  }
  
  export class DecreaseAllowanceCall extends ethereum.Call {
    get inputs(): DecreaseAllowanceCall__Inputs {
      return new DecreaseAllowanceCall__Inputs(this);
    }
  
    get outputs(): DecreaseAllowanceCall__Outputs {
      return new DecreaseAllowanceCall__Outputs(this);
    }
  }
  
  export class DecreaseAllowanceCall__Inputs {
    _call: DecreaseAllowanceCall;
  
    constructor(call: DecreaseAllowanceCall) {
      this._call = call;
    }
  
    get spender(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get subtractedValue(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  }
  
  export class DecreaseAllowanceCall__Outputs {
    _call: DecreaseAllowanceCall;
  
    constructor(call: DecreaseAllowanceCall) {
      this._call = call;
    }
  
    get value0(): boolean {
      return this._call.outputValues[0].value.toBoolean();
    }
  }
  
  export class DepositCall extends ethereum.Call {
    get inputs(): DepositCall__Inputs {
      return new DepositCall__Inputs(this);
    }
  
    get outputs(): DepositCall__Outputs {
      return new DepositCall__Outputs(this);
    }
  }
  
  export class DepositCall__Inputs {
    _call: DepositCall;
  
    constructor(call: DepositCall) {
      this._call = call;
    }
  
    get amount0Desired(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  
    get amount1Desired(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get amount0Min(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get amount1Min(): BigInt {
      return this._call.inputValues[3].value.toBigInt();
    }
  
    get to(): Address {
      return this._call.inputValues[4].value.toAddress();
    }
  }
  
  export class DepositCall__Outputs {
    _call: DepositCall;
  
    constructor(call: DepositCall) {
      this._call = call;
    }
  
    get shares(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get amount0Used(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  
    get amount1Used(): BigInt {
      return this._call.outputValues[2].value.toBigInt();
    }
  }
  
  export class EmergencyBurnCall extends ethereum.Call {
    get inputs(): EmergencyBurnCall__Inputs {
      return new EmergencyBurnCall__Inputs(this);
    }
  
    get outputs(): EmergencyBurnCall__Outputs {
      return new EmergencyBurnCall__Outputs(this);
    }
  }
  
  export class EmergencyBurnCall__Inputs {
    _call: EmergencyBurnCall;
  
    constructor(call: EmergencyBurnCall) {
      this._call = call;
    }
  
    get tickLower(): i32 {
      return this._call.inputValues[0].value.toI32();
    }
  
    get tickUpper(): i32 {
      return this._call.inputValues[1].value.toI32();
    }
  
    get liquidity(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  }
  
  export class EmergencyBurnCall__Outputs {
    _call: EmergencyBurnCall;
  
    constructor(call: EmergencyBurnCall) {
      this._call = call;
    }
  
    get amount0(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get amount1(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  }
  
  export class GrantRoleCall extends ethereum.Call {
    get inputs(): GrantRoleCall__Inputs {
      return new GrantRoleCall__Inputs(this);
    }
  
    get outputs(): GrantRoleCall__Outputs {
      return new GrantRoleCall__Outputs(this);
    }
  }
  
  export class GrantRoleCall__Inputs {
    _call: GrantRoleCall;
  
    constructor(call: GrantRoleCall) {
      this._call = call;
    }
  
    get role(): Bytes {
      return this._call.inputValues[0].value.toBytes();
    }
  
    get account(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  }
  
  export class GrantRoleCall__Outputs {
    _call: GrantRoleCall;
  
    constructor(call: GrantRoleCall) {
      this._call = call;
    }
  }
  
  export class IncreaseAllowanceCall extends ethereum.Call {
    get inputs(): IncreaseAllowanceCall__Inputs {
      return new IncreaseAllowanceCall__Inputs(this);
    }
  
    get outputs(): IncreaseAllowanceCall__Outputs {
      return new IncreaseAllowanceCall__Outputs(this);
    }
  }
  
  export class IncreaseAllowanceCall__Inputs {
    _call: IncreaseAllowanceCall;
  
    constructor(call: IncreaseAllowanceCall) {
      this._call = call;
    }
  
    get spender(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get addedValue(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  }
  
  export class IncreaseAllowanceCall__Outputs {
    _call: IncreaseAllowanceCall;
  
    constructor(call: IncreaseAllowanceCall) {
      this._call = call;
    }
  
    get value0(): boolean {
      return this._call.outputValues[0].value.toBoolean();
    }
  }
  
  export class InitializeCall extends ethereum.Call {
    get inputs(): InitializeCall__Inputs {
      return new InitializeCall__Inputs(this);
    }
  
    get outputs(): InitializeCall__Outputs {
      return new InitializeCall__Outputs(this);
    }
  }
  
  export class InitializeCall__Inputs {
    _call: InitializeCall;
  
    constructor(call: InitializeCall) {
      this._call = call;
    }
  
    get _orchestrator(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get _steer(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get _internalGovernance(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  
    get _params(): Bytes {
      return this._call.inputValues[3].value.toBytes();
    }
  }
  
  export class InitializeCall__Outputs {
    _call: InitializeCall;
  
    constructor(call: InitializeCall) {
      this._call = call;
    }
  }
  
  export class PauseCall extends ethereum.Call {
    get inputs(): PauseCall__Inputs {
      return new PauseCall__Inputs(this);
    }
  
    get outputs(): PauseCall__Outputs {
      return new PauseCall__Outputs(this);
    }
  }
  
  export class PauseCall__Inputs {
    _call: PauseCall;
  
    constructor(call: PauseCall) {
      this._call = call;
    }
  }
  
  export class PauseCall__Outputs {
    _call: PauseCall;
  
    constructor(call: PauseCall) {
      this._call = call;
    }
  }
  
  export class PokeCall extends ethereum.Call {
    get inputs(): PokeCall__Inputs {
      return new PokeCall__Inputs(this);
    }
  
    get outputs(): PokeCall__Outputs {
      return new PokeCall__Outputs(this);
    }
  }
  
  export class PokeCall__Inputs {
    _call: PokeCall;
  
    constructor(call: PokeCall) {
      this._call = call;
    }
  }
  
  export class PokeCall__Outputs {
    _call: PokeCall;
  
    constructor(call: PokeCall) {
      this._call = call;
    }
  }
  
  export class RenounceRoleCall extends ethereum.Call {
    get inputs(): RenounceRoleCall__Inputs {
      return new RenounceRoleCall__Inputs(this);
    }
  
    get outputs(): RenounceRoleCall__Outputs {
      return new RenounceRoleCall__Outputs(this);
    }
  }
  
  export class RenounceRoleCall__Inputs {
    _call: RenounceRoleCall;
  
    constructor(call: RenounceRoleCall) {
      this._call = call;
    }
  
    get role(): Bytes {
      return this._call.inputValues[0].value.toBytes();
    }
  
    get account(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  }
  
  export class RenounceRoleCall__Outputs {
    _call: RenounceRoleCall;
  
    constructor(call: RenounceRoleCall) {
      this._call = call;
    }
  }
  
  export class RevokeRoleCall extends ethereum.Call {
    get inputs(): RevokeRoleCall__Inputs {
      return new RevokeRoleCall__Inputs(this);
    }
  
    get outputs(): RevokeRoleCall__Outputs {
      return new RevokeRoleCall__Outputs(this);
    }
  }
  
  export class RevokeRoleCall__Inputs {
    _call: RevokeRoleCall;
  
    constructor(call: RevokeRoleCall) {
      this._call = call;
    }
  
    get role(): Bytes {
      return this._call.inputValues[0].value.toBytes();
    }
  
    get account(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  }
  
  export class RevokeRoleCall__Outputs {
    _call: RevokeRoleCall;
  
    constructor(call: RevokeRoleCall) {
      this._call = call;
    }
  }
  
  export class SetMaxTotalSupplyCall extends ethereum.Call {
    get inputs(): SetMaxTotalSupplyCall__Inputs {
      return new SetMaxTotalSupplyCall__Inputs(this);
    }
  
    get outputs(): SetMaxTotalSupplyCall__Outputs {
      return new SetMaxTotalSupplyCall__Outputs(this);
    }
  }
  
  export class SetMaxTotalSupplyCall__Inputs {
    _call: SetMaxTotalSupplyCall;
  
    constructor(call: SetMaxTotalSupplyCall) {
      this._call = call;
    }
  
    get _maxTotalSupply(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  }
  
  export class SetMaxTotalSupplyCall__Outputs {
    _call: SetMaxTotalSupplyCall;
  
    constructor(call: SetMaxTotalSupplyCall) {
      this._call = call;
    }
  }
  
  export class SteerCollectFeesCall extends ethereum.Call {
    get inputs(): SteerCollectFeesCall__Inputs {
      return new SteerCollectFeesCall__Inputs(this);
    }
  
    get outputs(): SteerCollectFeesCall__Outputs {
      return new SteerCollectFeesCall__Outputs(this);
    }
  }
  
  export class SteerCollectFeesCall__Inputs {
    _call: SteerCollectFeesCall;
  
    constructor(call: SteerCollectFeesCall) {
      this._call = call;
    }
  
    get amount0(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  
    get amount1(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get to(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class SteerCollectFeesCall__Outputs {
    _call: SteerCollectFeesCall;
  
    constructor(call: SteerCollectFeesCall) {
      this._call = call;
    }
  }
  
  export class StrategistCollectFeesCall extends ethereum.Call {
    get inputs(): StrategistCollectFeesCall__Inputs {
      return new StrategistCollectFeesCall__Inputs(this);
    }
  
    get outputs(): StrategistCollectFeesCall__Outputs {
      return new StrategistCollectFeesCall__Outputs(this);
    }
  }
  
  export class StrategistCollectFeesCall__Inputs {
    _call: StrategistCollectFeesCall;
  
    constructor(call: StrategistCollectFeesCall) {
      this._call = call;
    }
  
    get amount0(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  
    get amount1(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get to(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class StrategistCollectFeesCall__Outputs {
    _call: StrategistCollectFeesCall;
  
    constructor(call: StrategistCollectFeesCall) {
      this._call = call;
    }
  }
  
  export class SweepCall extends ethereum.Call {
    get inputs(): SweepCall__Inputs {
      return new SweepCall__Inputs(this);
    }
  
    get outputs(): SweepCall__Outputs {
      return new SweepCall__Outputs(this);
    }
  }
  
  export class SweepCall__Inputs {
    _call: SweepCall;
  
    constructor(call: SweepCall) {
      this._call = call;
    }
  
    get token(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get to(): Address {
      return this._call.inputValues[2].value.toAddress();
    }
  }
  
  export class SweepCall__Outputs {
    _call: SweepCall;
  
    constructor(call: SweepCall) {
      this._call = call;
    }
  }
  
  export class TendCall extends ethereum.Call {
    get inputs(): TendCall__Inputs {
      return new TendCall__Inputs(this);
    }
  
    get outputs(): TendCall__Outputs {
      return new TendCall__Outputs(this);
    }
  }
  
  export class TendCall__Inputs {
    _call: TendCall;
  
    constructor(call: TendCall) {
      this._call = call;
    }
  
    get totalWeight(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  
    get newLowerTick(): i32 {
      return this._call.inputValues[1].value.toI32();
    }
  
    get newUpperTick(): i32 {
      return this._call.inputValues[2].value.toI32();
    }
  
    get swapAmount(): BigInt {
      return this._call.inputValues[3].value.toBigInt();
    }
  
    get sqrtPriceLimitX96(): BigInt {
      return this._call.inputValues[4].value.toBigInt();
    }
  }
  
  export class TendCall__Outputs {
    _call: TendCall;
  
    constructor(call: TendCall) {
      this._call = call;
    }
  }
  
  export class TransferCall extends ethereum.Call {
    get inputs(): TransferCall__Inputs {
      return new TransferCall__Inputs(this);
    }
  
    get outputs(): TransferCall__Outputs {
      return new TransferCall__Outputs(this);
    }
  }
  
  export class TransferCall__Inputs {
    _call: TransferCall;
  
    constructor(call: TransferCall) {
      this._call = call;
    }
  
    get recipient(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  }
  
  export class TransferCall__Outputs {
    _call: TransferCall;
  
    constructor(call: TransferCall) {
      this._call = call;
    }
  
    get value0(): boolean {
      return this._call.outputValues[0].value.toBoolean();
    }
  }
  
  export class TransferFromCall extends ethereum.Call {
    get inputs(): TransferFromCall__Inputs {
      return new TransferFromCall__Inputs(this);
    }
  
    get outputs(): TransferFromCall__Outputs {
      return new TransferFromCall__Outputs(this);
    }
  }
  
  export class TransferFromCall__Inputs {
    _call: TransferFromCall;
  
    constructor(call: TransferFromCall) {
      this._call = call;
    }
  
    get sender(): Address {
      return this._call.inputValues[0].value.toAddress();
    }
  
    get recipient(): Address {
      return this._call.inputValues[1].value.toAddress();
    }
  
    get amount(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  }
  
  export class TransferFromCall__Outputs {
    _call: TransferFromCall;
  
    constructor(call: TransferFromCall) {
      this._call = call;
    }
  
    get value0(): boolean {
      return this._call.outputValues[0].value.toBoolean();
    }
  }
  
  export class UniswapV3MintCallbackCall extends ethereum.Call {
    get inputs(): UniswapV3MintCallbackCall__Inputs {
      return new UniswapV3MintCallbackCall__Inputs(this);
    }
  
    get outputs(): UniswapV3MintCallbackCall__Outputs {
      return new UniswapV3MintCallbackCall__Outputs(this);
    }
  }
  
  export class UniswapV3MintCallbackCall__Inputs {
    _call: UniswapV3MintCallbackCall;
  
    constructor(call: UniswapV3MintCallbackCall) {
      this._call = call;
    }
  
    get amount0(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  
    get amount1(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get data(): Bytes {
      return this._call.inputValues[2].value.toBytes();
    }
  }
  
  export class UniswapV3MintCallbackCall__Outputs {
    _call: UniswapV3MintCallbackCall;
  
    constructor(call: UniswapV3MintCallbackCall) {
      this._call = call;
    }
  }
  
  export class UniswapV3SwapCallbackCall extends ethereum.Call {
    get inputs(): UniswapV3SwapCallbackCall__Inputs {
      return new UniswapV3SwapCallbackCall__Inputs(this);
    }
  
    get outputs(): UniswapV3SwapCallbackCall__Outputs {
      return new UniswapV3SwapCallbackCall__Outputs(this);
    }
  }
  
  export class UniswapV3SwapCallbackCall__Inputs {
    _call: UniswapV3SwapCallbackCall;
  
    constructor(call: UniswapV3SwapCallbackCall) {
      this._call = call;
    }
  
    get amount0Wanted(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  
    get amount1Wanted(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get data(): Bytes {
      return this._call.inputValues[2].value.toBytes();
    }
  }
  
  export class UniswapV3SwapCallbackCall__Outputs {
    _call: UniswapV3SwapCallbackCall;
  
    constructor(call: UniswapV3SwapCallbackCall) {
      this._call = call;
    }
  }
  
  export class UnpauseCall extends ethereum.Call {
    get inputs(): UnpauseCall__Inputs {
      return new UnpauseCall__Inputs(this);
    }
  
    get outputs(): UnpauseCall__Outputs {
      return new UnpauseCall__Outputs(this);
    }
  }
  
  export class UnpauseCall__Inputs {
    _call: UnpauseCall;
  
    constructor(call: UnpauseCall) {
      this._call = call;
    }
  }
  
  export class UnpauseCall__Outputs {
    _call: UnpauseCall;
  
    constructor(call: UnpauseCall) {
      this._call = call;
    }
  }
  
  export class WithdrawCall extends ethereum.Call {
    get inputs(): WithdrawCall__Inputs {
      return new WithdrawCall__Inputs(this);
    }
  
    get outputs(): WithdrawCall__Outputs {
      return new WithdrawCall__Outputs(this);
    }
  }
  
  export class WithdrawCall__Inputs {
    _call: WithdrawCall;
  
    constructor(call: WithdrawCall) {
      this._call = call;
    }
  
    get shares(): BigInt {
      return this._call.inputValues[0].value.toBigInt();
    }
  
    get amount0Min(): BigInt {
      return this._call.inputValues[1].value.toBigInt();
    }
  
    get amount1Min(): BigInt {
      return this._call.inputValues[2].value.toBigInt();
    }
  
    get to(): Address {
      return this._call.inputValues[3].value.toAddress();
    }
  }
  
  export class WithdrawCall__Outputs {
    _call: WithdrawCall;
  
    constructor(call: WithdrawCall) {
      this._call = call;
    }
  
    get amount0(): BigInt {
      return this._call.outputValues[0].value.toBigInt();
    }
  
    get amount1(): BigInt {
      return this._call.outputValues[1].value.toBigInt();
    }
  }
  