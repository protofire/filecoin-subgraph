{
  "address": "0x795BF9303441ef0b1134220d9142A49d8212260C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "RewardsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "claimPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakingRewards.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakingRewards.Pool[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "getRewardsForAPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "setJobState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalRewardsPerPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfoPerPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewarded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48e0d1c94d1c2cfeca0534856aaa0ffd602166e4f48b6f62e3be804e442fd4ed",
  "receipt": {
    "to": null,
    "from": "0x2745ec614C23854DdD02CB881f2e1b24ADa8c35C",
    "contractAddress": "0x795BF9303441ef0b1134220d9142A49d8212260C",
    "transactionIndex": 1,
    "gasUsed": "2194194",
    "logsBloom": "0x
    "blockHash": "0xa900da9841b5f9d257a1d197cda58e12b5b3512f6fffb91a84371bb1091e14ff",
    "transactionHash": "0x48e0d1c94d1c2cfeca0534856aaa0ffd602166e4f48b6f62e3be804e442fd4ed",
    "logs": [],
    "blockNumber": 8886147,
    "cumulativeGasUsed": "2241083",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "412a8f2cb6c64662ec4ec37c56f333b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"claimPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakingRewards.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakingRewards.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getRewardsForAPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setJobState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalRewardsPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Steer Protocol\",\"details\":\"This contract is used to reward stakers for their staking time.\",\"kind\":\"dev\",\"methods\":{\"claimPendingRewards(uint256)\":{\"details\":\"To claim the pending rewards\",\"params\":{\"poolId\":\"The id of the pool from which the pending rewards should be claimed\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createPool(address,address,uint256,uint256,uint256)\":{\"details\":\"To create a staking pool\",\"params\":{\"end\":\"Ending time for the staking pool\",\"rewardRate\":\"Rate at which the rewards will be calculated yearly and then multiplied by 100\",\"rewardToken\":\"Address of the token that will be given as reward\",\"stakingToken\":\"Address of the token that will be staked\",\"start\":\"Start time of the staking pool\"}},\"depositRewards(uint256,uint256)\":{\"details\":\"To deposit reward tokens that will be given to the stakers.\",\"params\":{\"amount\":\"The value of tokens that should be added to give out as rewards.\",\"poolId\":\"The id of the pool in which rewards should be allocated\"}},\"getPool(uint256)\":{\"details\":\"To get the pool for given id\",\"returns\":{\"_0\":\"Pool which has the details for every pool\"}},\"getPools()\":{\"details\":\"To get the details for all pools\",\"returns\":{\"_0\":\"pools which has the details for every pool\"}},\"getRewardsForAPool(address,uint256)\":{\"details\":\"To get rewards for a particular address for a particular pool\",\"params\":{\"account\":\"The address of the account whose reward is to be fetched\",\"poolId\":\"The id of the pool from which rewards for the account needs to be fetched\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setJobState(uint256,bool)\":{\"details\":\"To pause or resume a particular staking pool\",\"params\":{\"pause\":\"The boolean where passing true means pause the pool              and passing false means resume the pool\",\"poolId\":\"The id of the staking pool that should be paused or resumed\"}},\"stake(uint256,uint256)\":{\"details\":\"To stake tokens\",\"params\":{\"amount\":\"The number of tokens to be staked.\",\"poolId\":\"The id of the pool in which tokens should be staked.\"}},\"stakeFor(address,uint256,uint256)\":{\"details\":\"To stake tokens\",\"params\":{\"amount\":\"The number of tokens to be staked.\",\"poolId\":\"The id of the pool in which tokens should be staked.\",\"user\":\"The address that stake tokens for.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"details\":\"To unstake staked tokens.\",\"params\":{\"poolId\":\"The id of pool from which the tokens whould be unstaked.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawRewards(uint256,uint256,address)\":{\"details\":\"To withdraw the extra rewards that remains on the contract      and can only be called by owner of this contract.\",\"params\":{\"amount\":\"The value of tokens that should be removed from the contract.\",\"poolId\":\"The id of the pool in which rewards should be withdrawn\",\"receiver\":\"The address where the withdrawn tokens should be sent\"}}},\"title\":\"Staking reward contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.12;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\r\\n\\r\\n/// @title Staking reward contract\\r\\n/// @author Steer Protocol\\r\\n/// @dev This contract is used to reward stakers for their staking time.\\r\\ncontract StakingRewards is\\r\\n    IStakingRewards,\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    // Storage\\r\\n\\r\\n    // Constants\\r\\n    uint256 public constant PRECISION = 1e18;\\r\\n    uint256 public constant SECONDS_IN_YEAR = 31_536_000;\\r\\n    uint256 public constant RATE_PRECISION = 100_00; //Precision for reward calculaion\\r\\n\\r\\n    // Mapping of Pool details to pool id\\r\\n    mapping(uint256 => Pool) public pools;\\r\\n\\r\\n    // Total no. of pools created\\r\\n    uint256 public totalPools;\\r\\n\\r\\n    //Mapping of user details per pool\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfoPerPool;\\r\\n\\r\\n    // Mapping of total rewards allocated currently for a pool\\r\\n    mapping(uint256 => uint256) public totalRewardsPerPool;\\r\\n\\r\\n    // Mapping that returns the state of pool by passing pool id, true means staking is paused and false means staking is allowed\\r\\n    mapping(uint256 => bool) public isPaused;\\r\\n\\r\\n    // Mapping that returns pending rewards for a particular user for a particular pool\\r\\n    mapping(address => mapping(uint256 => uint256)) public pendingRewards;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer() {}\\r\\n\\r\\n    // External Functions\\r\\n\\r\\n    /// @dev To stake tokens\\r\\n    /// @param amount The number of tokens to be staked.\\r\\n    /// @param poolId The id of the pool in which tokens should be staked.\\r\\n    function stake(uint256 amount, uint256 poolId) external {\\r\\n        _stake(msg.sender, amount, poolId);\\r\\n    }\\r\\n\\r\\n    /// @dev To stake tokens\\r\\n    /// @param user The address that stake tokens for.\\r\\n    /// @param amount The number of tokens to be staked.\\r\\n    /// @param poolId The id of the pool in which tokens should be staked.\\r\\n    function stakeFor(address user, uint256 amount, uint256 poolId) external {\\r\\n        _stake(user, amount, poolId);\\r\\n    }\\r\\n\\r\\n    /// @dev To unstake staked tokens.\\r\\n    /// @param poolId The id of pool from which the tokens whould be unstaked.\\r\\n    function unstake(uint256 poolId) external {\\r\\n        Pool memory pool = pools[poolId];\\r\\n        UserInfo storage userInfo = userInfoPerPool[poolId][msg.sender];\\r\\n        uint256 amount = userInfo.balance;\\r\\n        require(amount != 0, \\\"0 Stake\\\");\\r\\n        pools[poolId].totalAmount -= amount;\\r\\n        if (block.timestamp > pool.end) {\\r\\n            claimReward(poolId, pool, userInfo);\\r\\n        } else {\\r\\n            userInfo.lastRewarded = 0;\\r\\n            userInfo.rewards = 0;\\r\\n            userInfo.balance = 0;\\r\\n        }\\r\\n        IERC20Upgradeable(pool.stakingToken).safeTransfer(msg.sender, amount);\\r\\n        emit Withdrawn(msg.sender, amount, poolId);\\r\\n    }\\r\\n\\r\\n    /// @dev To claim the pending rewards\\r\\n    /// @param poolId The id of the pool from which the pending rewards should be claimed\\r\\n    function claimPendingRewards(uint256 poolId) external {\\r\\n        uint256 pending = pendingRewards[msg.sender][poolId];\\r\\n        pendingRewards[msg.sender][poolId] = 0;\\r\\n        totalRewardsPerPool[poolId] -= pending;\\r\\n        IERC20Upgradeable(pools[poolId].rewardToken).safeTransfer(\\r\\n            msg.sender,\\r\\n            pending\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Internal Functions\\r\\n\\r\\n    function claimReward(\\r\\n        uint256 poolId,\\r\\n        Pool memory pool,\\r\\n        UserInfo storage userInfo\\r\\n    ) internal {\\r\\n        updateReward(pool, userInfo);\\r\\n        uint256 reward = userInfo.rewards;\\r\\n        userInfo.rewards = 0;\\r\\n        userInfo.balance = 0;\\r\\n        userInfo.lastRewarded = 0;\\r\\n        uint256 totalRewards = totalRewardsPerPool[poolId];\\r\\n        if (totalRewards >= reward) {\\r\\n            totalRewardsPerPool[poolId] = totalRewards - reward;\\r\\n            emit RewardPaid(msg.sender, poolId, reward);\\r\\n            IERC20Upgradeable(pool.rewardToken).safeTransfer(\\r\\n                msg.sender,\\r\\n                reward\\r\\n            );\\r\\n        } else {\\r\\n            pendingRewards[msg.sender][poolId] = reward - totalRewards;\\r\\n            totalRewardsPerPool[poolId] = 0;\\r\\n            emit RewardPaid(msg.sender, poolId, totalRewards);\\r\\n            IERC20Upgradeable(pool.rewardToken).safeTransfer(\\r\\n                msg.sender,\\r\\n                totalRewards\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateReward(\\r\\n        Pool memory pool,\\r\\n        UserInfo storage userInfo\\r\\n    ) internal {\\r\\n        uint256 stakeTime;\\r\\n        if (block.timestamp > pool.end) stakeTime = pool.end;\\r\\n        else stakeTime = block.timestamp;\\r\\n        uint256 balance = userInfo.balance;\\r\\n        uint256 lastReward;\\r\\n        if (balance != 0) {\\r\\n            lastReward =\\r\\n                (balance *\\r\\n                    (((stakeTime - userInfo.lastRewarded) *\\r\\n                        (pool.rewardRate * PRECISION)) /\\r\\n                        (RATE_PRECISION * SECONDS_IN_YEAR))) /\\r\\n                PRECISION;\\r\\n            userInfo.rewards += lastReward;\\r\\n        }\\r\\n        userInfo.lastRewarded = stakeTime;\\r\\n    }\\r\\n\\r\\n    /// @dev To stake tokens\\r\\n    /// @param user The address that stake tokens for.\\r\\n    /// @param amount The number of tokens to be staked.\\r\\n    /// @param poolId The id of the pool in which tokens should be staked.\\r\\n    function _stake(address user, uint256 amount, uint256 poolId) internal {\\r\\n        // Validate\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        Pool memory pool = pools[poolId];\\r\\n        UserInfo storage userInfo = userInfoPerPool[poolId][user];\\r\\n        require(pool.start <= block.timestamp, \\\"Staking not started\\\");\\r\\n        require(!isPaused[poolId], \\\"Staking Paused\\\");\\r\\n        require(block.timestamp < pool.end, \\\"Staking Period is over\\\");\\r\\n        // Update values before staking\\r\\n        updateReward(pool, userInfo);\\r\\n\\r\\n        // Stake\\r\\n        userInfo.balance += amount;\\r\\n        pools[poolId].totalAmount += amount;\\r\\n        IERC20Upgradeable(pool.stakingToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n        emit Staked(user, amount, poolId);\\r\\n    }\\r\\n\\r\\n    //Public functions\\r\\n    function initialize() public initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    // View Functions\\r\\n\\r\\n    /// @dev To get rewards for a particular address for a particular pool\\r\\n    /// @param account The address of the account whose reward is to be fetched\\r\\n    /// @param poolId The id of the pool from which rewards for the account needs to be fetched\\r\\n    function getRewardsForAPool(\\r\\n        address account,\\r\\n        uint256 poolId\\r\\n    ) external view returns (uint256) {\\r\\n        Pool memory pool = pools[poolId];\\r\\n        UserInfo memory userInfo = userInfoPerPool[poolId][account];\\r\\n        uint256 stakeTime;\\r\\n        if (block.timestamp > pool.end) stakeTime = pool.end;\\r\\n        else stakeTime = block.timestamp;\\r\\n        uint256 currentReward = (userInfo.balance *\\r\\n            (((stakeTime - userInfo.lastRewarded) *\\r\\n                (pool.rewardRate * PRECISION)) /\\r\\n                (RATE_PRECISION * SECONDS_IN_YEAR))) / PRECISION;\\r\\n        currentReward += userInfo.rewards;\\r\\n        return currentReward;\\r\\n    }\\r\\n\\r\\n    /// @dev To get the pool for given id\\r\\n    /// @return Pool which has the details for every pool\\r\\n    function getPool(uint256 poolId) public view returns (Pool memory) {\\r\\n        return pools[poolId];\\r\\n    }\\r\\n\\r\\n    /// @dev To get the details for all pools\\r\\n    /// @return pools which has the details for every pool\\r\\n    function getPools() public view returns (Pool[] memory, string[] memory) {\\r\\n        uint256 _totalPools = totalPools;\\r\\n        Pool[] memory _pools = new Pool[](_totalPools);\\r\\n        string[] memory symbols = new string[](_totalPools);\\r\\n        for (uint256 i; i != _totalPools; ++i) {\\r\\n            _pools[i] = pools[i];\\r\\n            string memory stakingTokenSymbol = IERC20Metadata(\\r\\n                _pools[i].stakingToken\\r\\n            ).symbol();\\r\\n            string memory rewardTokenSymbol = IERC20Metadata(\\r\\n                _pools[i].rewardToken\\r\\n            ).symbol();\\r\\n            symbols[i] = string(\\r\\n                abi.encodePacked(stakingTokenSymbol, \\\"/\\\", rewardTokenSymbol)\\r\\n            );\\r\\n        }\\r\\n        return (_pools, symbols);\\r\\n    }\\r\\n\\r\\n    function getBalances(\\r\\n        address user\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        uint256 _totalPools = totalPools;\\r\\n        uint256[] memory _balances = new uint256[](_totalPools);\\r\\n        for (uint256 i; i != _totalPools; ++i)\\r\\n            _balances[i] = userInfoPerPool[i][user].balance;\\r\\n        return _balances;\\r\\n    }\\r\\n\\r\\n    //Only Owner functions\\r\\n\\r\\n    function _authorizeUpgrade(\\r\\n        address newImplementation\\r\\n    ) internal override onlyOwner {}\\r\\n\\r\\n    /// @dev To create a staking pool\\r\\n    /// @param stakingToken Address of the token that will be staked\\r\\n    /// @param rewardToken Address of the token that will be given as reward\\r\\n    /// @param rewardRate Rate at which the rewards will be calculated yearly and then multiplied by 100\\r\\n    /// @param start Start time of the staking pool\\r\\n    /// @param end Ending time for the staking pool\\r\\n    function createPool(\\r\\n        address stakingToken,\\r\\n        address rewardToken,\\r\\n        uint256 rewardRate,\\r\\n        uint256 start,\\r\\n        uint256 end\\r\\n    ) external onlyOwner {\\r\\n        uint256 _totalPools = totalPools;\\r\\n        require(start < end, \\\"TIME\\\");\\r\\n        require(stakingToken != rewardToken, \\\"SAME\\\");\\r\\n        pools[_totalPools] = Pool({\\r\\n            stakingToken: stakingToken,\\r\\n            rewardToken: rewardToken,\\r\\n            rewardRate: rewardRate * 100,\\r\\n            totalAmount: 0,\\r\\n            start: start,\\r\\n            end: end\\r\\n        });\\r\\n        totalPools = _totalPools + 1;\\r\\n    }\\r\\n\\r\\n    /// @dev To pause or resume a particular staking pool\\r\\n    /// @param poolId The id of the staking pool that should be paused or resumed\\r\\n    /// @param pause The boolean where passing true means pause the pool\\r\\n    ///              and passing false means resume the pool\\r\\n    function setJobState(uint256 poolId, bool pause) external onlyOwner {\\r\\n        isPaused[poolId] = pause;\\r\\n    }\\r\\n\\r\\n    /// @dev To deposit reward tokens that will be given to the stakers.\\r\\n    /// @param poolId The id of the pool in which rewards should be allocated\\r\\n    /// @param amount The value of tokens that should be added to give out as rewards.\\r\\n    function depositRewards(uint256 poolId, uint256 amount) external {\\r\\n        totalRewardsPerPool[poolId] += amount;\\r\\n        emit RewardsDeposited(msg.sender, poolId, amount);\\r\\n        IERC20Upgradeable(pools[poolId].rewardToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev To withdraw the extra rewards that remains on the contract\\r\\n    ///      and can only be called by owner of this contract.\\r\\n    /// @param poolId The id of the pool in which rewards should be withdrawn\\r\\n    /// @param amount The value of tokens that should be removed from the contract.\\r\\n    /// @param receiver The address where the withdrawn tokens should be sent\\r\\n    function withdrawRewards(\\r\\n        uint256 poolId,\\r\\n        uint256 amount,\\r\\n        address receiver\\r\\n    ) external onlyOwner {\\r\\n        // Reduce totalRewards by amount.\\r\\n        // Owner cannot withdraw more rewards than they have deposited.\\r\\n        totalRewardsPerPool[poolId] -= amount;\\r\\n        emit RewardsWithdrawn(amount, poolId);\\r\\n        IERC20Upgradeable(pools[poolId].rewardToken).safeTransfer(\\r\\n            receiver,\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf2e3808a2bc1f0190dc8dc2966a6a3af1d9c8b7b87e39c052345726733c26711\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IStakingRewards {\\r\\n    // Structs\\r\\n\\r\\n    /// stakingToken : Address of the token that will be staked\\r\\n    /// rewardToken : Address of the token that will be given as reward\\r\\n    /// rewardRate : Rate at which the rewards will be calculated,\\r\\n    ///             reward rate will be multiplied by 100 for decimal precision,\\r\\n    ///             for e.g. 6000 means 60%/year, 1000 means 10%/year\\r\\n    /// start : Start time of the staking pool\\r\\n    /// end : Ending time for the staking pool\\r\\n    struct Pool {\\r\\n        address stakingToken;\\r\\n        address rewardToken;\\r\\n        uint256 rewardRate;\\r\\n        uint256 totalAmount;\\r\\n        uint256 start;\\r\\n        uint256 end;\\r\\n    }\\r\\n\\r\\n    ///balance : Staked balance of a user\\r\\n    ///lastRewarded : The time at which a user was last rewarded\\r\\n    ///rewards : Amount of rewards accrued by a user(Note - This is not a track of\\r\\n    /// real time rewards,this is a track of rewards till the last time user interacted with\\r\\n    /// the last rewarded variable)\\r\\n    struct UserInfo {\\r\\n        uint256 balance;\\r\\n        uint256 lastRewarded;\\r\\n        uint256 rewards;\\r\\n    }\\r\\n\\r\\n    // Events\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount, uint256 poolId);\\r\\n    event Withdrawn(address indexed user, uint256 amount, uint256 poolId);\\r\\n    event RewardPaid(address indexed user, uint256 poolId, uint256 reward);\\r\\n    event RewardsDeposited(address depositor, uint256 poolId, uint256 amount);\\r\\n    event RewardsWithdrawn(uint256 amount, uint256 poolId);\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    function createPool(\\r\\n        address stakingToken,\\r\\n        address rewardToken,\\r\\n        uint256 rewardRate,\\r\\n        uint256 start,\\r\\n        uint256 end\\r\\n    ) external;\\r\\n\\r\\n    function stake(uint256 amount, uint256 poolId) external;\\r\\n\\r\\n    function stakeFor(address user, uint256 amount, uint256 poolId) external;\\r\\n\\r\\n    function unstake(uint256 poolId) external;\\r\\n\\r\\n    function depositRewards(uint256 poolId, uint256 amount) external;\\r\\n\\r\\n    function withdrawRewards(\\r\\n        uint256 poolId,\\r\\n        uint256 amount,\\r\\n        address receiver\\r\\n    ) external;\\r\\n\\r\\n    function setJobState(uint256 poolId, bool pause) external;\\r\\n\\r\\n    function claimPendingRewards(uint256 poolId) external;\\r\\n\\r\\n    function getRewardsForAPool(\\r\\n        address account,\\r\\n        uint256 poolId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getPools()\\r\\n        external\\r\\n        view\\r\\n        returns (Pool[] memory pools, string[] memory symbols);\\r\\n\\r\\n    function getPool(uint256 poolId) external view returns (Pool memory pool);\\r\\n}\\r\\n\",\"keccak256\":\"0x9249c10916907f556e028bd11b7ee6f37ea05847e8ca046feb736a5a07f2d3a9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff16620000335760005460ff16156200003d565b6200003d620000e2565b620000a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c8576000805461ffff19166101011790555b8015620000db576000805461ff00191690555b5062000106565b6000620000fa306200010060201b620012e21760201c565b15905090565b3b151590565b608051612643620001376000396000818161090701528181610947015281816109d00152610a1001526126436000f3fe60806040526004361061019c5760003560e01c8063715018a6116100ec578063ab3c7e521161008a578063bdf2a43c11610064578063bdf2a43c1461054b578063c84aae171461058b578063d68f265f146105b8578063f2fde38b146105d857600080fd5b8063ab3c7e5214610480578063ac4afa3814610496578063bdd071fb1461052b57600080fd5b80638129fc1c116100c65780638129fc1c1461040757806385ac165a1461041c5780638da5cb5b1461043c578063aaf5eb681461046457600080fd5b8063715018a6146103b2578063716f02c0146103c75780637b0472f0146103e757600080fd5b806358e9a815116101595780636099ecb2116101335780636099ecb2146102d5578063667832501461030d578063673a2a1f1461036f57806367c041e31461039257600080fd5b806358e9a815146102705780635dcc939114610290578063602ae8a8146102a857600080fd5b8063068bcd8d146101a157806308b1e6b9146101d75780632b3ba681146102055780632e17de781461021b5780633659cfe61461023d5780634f1ef2861461025d575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004611ed5565b6105f8565b6040516101ce9190611f33565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004611f5d565b610665565b6040519081526020016101ce565b34801561021157600080fd5b506101f761271081565b34801561022757600080fd5b5061023b610236366004611ed5565b6107a5565b005b34801561024957600080fd5b5061023b610258366004611f87565b6108fc565b61023b61026b366004612011565b6109c5565b34801561027c57600080fd5b5061023b61028b3660046120a2565b610a7f565b34801561029c57600080fd5b506101f76301e1338081565b3480156102b457600080fd5b506101f76102c3366004611ed5565b60cc6020526000908152604090205481565b3480156102e157600080fd5b506101f76102f0366004611f5d565b60ce60209081526000928352604080842090915290825290205481565b34801561031957600080fd5b506103546103283660046120d5565b60cb60209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016101ce565b34801561037b57600080fd5b50610384610a8f565b6040516101ce929190612159565b34801561039e57600080fd5b5061023b6103ad366004612209565b610d34565b3480156103be57600080fd5b5061023b610d7e565b3480156103d357600080fd5b5061023b6103e2366004611ed5565b610db4565b3480156103f357600080fd5b5061023b610402366004612239565b610e17565b34801561041357600080fd5b5061023b610e22565b34801561042857600080fd5b5061023b61043736600461225b565b610eea565b34801561044857600080fd5b506033546040516001600160a01b0390911681526020016101ce565b34801561047057600080fd5b506101f7670de0b6b3a764000081565b34801561048c57600080fd5b506101f760ca5481565b3480156104a257600080fd5b506104f36104b1366004611ed5565b60c9602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593909416939192909186565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c0016101ce565b34801561053757600080fd5b5061023b610546366004612239565b611062565b34801561055757600080fd5b5061057b610566366004611ed5565b60cd6020526000908152604090205460ff1681565b60405190151581526020016101ce565b34801561059757600080fd5b506105ab6105a6366004611f87565b6110ed565b6040516101ce91906122a8565b3480156105c457600080fd5b5061023b6105d33660046122ec565b61119e565b3480156105e457600080fd5b5061023b6105f3366004611f87565b61124a565b610600611e8d565b50600090815260c96020908152604091829020825160c08101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a082015290565b600081815260c960209081526040808320815160c08101835281546001600160a01b0390811682526001808401548216838701526002808501548487015260038501546060808601919091526004860154608086015260059095015460a0850190815289895260cb8852868920938b16895292875285882086519586018752805486529182015496850196909652909401549282019290925291519091908390421115610717575060a082015161071a565b50425b6000670de0b6b3a76400006107356301e13380612710612337565b670de0b6b3a7640000866040015161074d9190612337565b602086015161075c9086612356565b6107669190612337565b610770919061236d565b845161077c9190612337565b610786919061236d565b9050826040015181610798919061238f565b9450505050505b92915050565b600081815260c960209081526040808320815160c08101835281546001600160a01b03908116825260018301541681850152600282015481840152600382015460608201526004820154608082015260059091015460a082015284845260cb83528184203385529092529091208054806108505760405162461bcd60e51b815260206004820152600760248201526630205374616b6560c81b60448201526064015b60405180910390fd5b600084815260c9602052604081206003018054839290610871908490612356565b909155505060a08301514211156108925761088d8484846112e8565b6108a5565b6000600183018190556002830181905582555b82516108bb906001600160a01b03163383611425565b604080518281526020810186905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a250505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109455760405162461bcd60e51b8152600401610847906123a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610977611488565b6001600160a01b03161461099d5760405162461bcd60e51b8152600401610847906123f3565b6109a6816114b6565b604080516000808252602082019092526109c2918391906114e0565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a0e5760405162461bcd60e51b8152600401610847906123a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a40611488565b6001600160a01b031614610a665760405162461bcd60e51b8152600401610847906123f3565b610a6f826114b6565b610a7b828260016114e0565b5050565b610a8a838383611624565b505050565b60ca54606090819060008167ffffffffffffffff811115610ab257610ab2611fa2565b604051908082528060200260200182016040528015610aeb57816020015b610ad8611e8d565b815260200190600190039081610ad05790505b50905060008267ffffffffffffffff811115610b0957610b09611fa2565b604051908082528060200260200182016040528015610b3c57816020015b6060815260200190600190039081610b275790505b50905060005b838114610d2957600081815260c96020908152604091829020825160c08101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a08201528351849083908110610bbe57610bbe61243f565b60200260200101819052506000838281518110610bdd57610bdd61243f565b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4e9190810190612455565b90506000848381518110610c6457610c6461243f565b6020026020010151602001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd59190810190612455565b90508181604051602001610cea9291906124c3565b604051602081830303815290604052848481518110610d0b57610d0b61243f565b6020026020010181905250505080610d22906124ff565b9050610b42565b509094909350915050565b6033546001600160a01b03163314610d5e5760405162461bcd60e51b81526004016108479061251a565b600091825260cd6020526040909120805460ff1916911515919091179055565b6033546001600160a01b03163314610da85760405162461bcd60e51b81526004016108479061251a565b610db26000611867565b565b33600090815260ce60209081526040808320848452825280832080549084905560cc9092528220805491928392610dec908490612356565b9091555050600082815260c96020526040902060010154610a7b906001600160a01b03163383611425565b610a7b338383611624565b600054610100900460ff16610e3d5760005460ff1615610e41565b303b155b610ea45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610847565b600054610100900460ff16158015610ec6576000805461ffff19166101011790555b610ece6118b9565b610ed66118f0565b80156109c2576000805461ff001916905550565b6033546001600160a01b03163314610f145760405162461bcd60e51b81526004016108479061251a565b60ca54818310610f4f5760405162461bcd60e51b81526004016108479060208082526004908201526354494d4560e01b604082015260600190565b846001600160a01b0316866001600160a01b03161415610f9a5760405162461bcd60e51b81526004016108479060208082526004908201526353414d4560e01b604082015260600190565b6040805160c0810182526001600160a01b03808916825287166020820152908101610fc6866064612337565b8152600060208083018290526040808401889052606093840187905285835260c9825291829020845181546001600160a01b039182166001600160a01b0319918216178355928601516001808401805492909316919094161790559184015160028301559183015160038201556080830151600482015560a09092015160059092019190915561105790829061238f565b60ca55505050505050565b600082815260cc60205260408120805483929061108090849061238f565b909155505060408051338152602081018490529081018290527f6e8a19c7bcac2f8ca75d80a333a2cfffd851001c55ba805c58cc66c70d92bd749060600160405180910390a1600082815260c96020526040902060010154610a7b906001600160a01b0316333084611927565b60ca5460609060008167ffffffffffffffff81111561110e5761110e611fa2565b604051908082528060200260200182016040528015611137578160200160208202803683370190505b50905060005b82811461119657600081815260cb602090815260408083206001600160a01b0389168452909152902054825183908390811061117b5761117b61243f565b602090810291909101015261118f816124ff565b905061113d565b509392505050565b6033546001600160a01b031633146111c85760405162461bcd60e51b81526004016108479061251a565b600083815260cc6020526040812080548492906111e6908490612356565b909155505060408051838152602081018590527f630af8b49bb398089a74eacdb08106c528436090bdb35d7302152dc5117df9bd910160405180910390a1600083815260c96020526040902060010154610a8a906001600160a01b03168284611425565b6033546001600160a01b031633146112745760405162461bcd60e51b81526004016108479061251a565b6001600160a01b0381166112d95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610847565b6109c281611867565b3b151590565b6112f28282611965565b6002810180546000918290558183556001830182905584825260cc602052604090912054818110611393576113278282612356565b600086815260cc602090815260409182902092909255805187815291820184905233917fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51910160405180910390a2602084015161138e906001600160a01b03163384611425565b61141e565b61139d8183612356565b33600081815260ce602090815260408083208a845282528083209490945560cc90528281205590517fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51906113fd9088908590918252602082015260400190565b60405180910390a2602084015161141e906001600160a01b03163383611425565b5050505050565b6040516001600160a01b038316602482015260448101829052610a8a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a1a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146109c25760405162461bcd60e51b81526004016108479061251a565b60006114ea611488565b90506114f584611aec565b6000835111806115025750815b15611513576115118484611b91565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661141e57805460ff191660011781556040516001600160a01b038316602482015261159290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611b91565b50805460ff191681556115a3611488565b6001600160a01b0316826001600160a01b03161461161b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610847565b61141e85611c7c565b600082116116655760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610847565b600081815260c960209081526040808320815160c08101835281546001600160a01b03908116825260018301548116828601526002830154828501526003830154606083015260048301546080830190815260059093015460a083015286865260cb85528386209089168652909352922091519091904210156117205760405162461bcd60e51b815260206004820152601360248201527214dd185ada5b99c81b9bdd081cdd185c9d1959606a1b6044820152606401610847565b600083815260cd602052604090205460ff16156117705760405162461bcd60e51b815260206004820152600e60248201526d14dd185ada5b99c814185d5cd95960921b6044820152606401610847565b8160a0015142106117bc5760405162461bcd60e51b815260206004820152601660248201527529ba30b5b4b733902832b934b7b21034b99037bb32b960511b6044820152606401610847565b6117c68282611965565b838160000160008282546117da919061238f565b9091555050600083815260c960205260408120600301805486929061180090849061238f565b9091555050815161181c906001600160a01b0316333087611927565b60408051858152602081018590526001600160a01b038716917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a25050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166118e05760405162461bcd60e51b81526004016108479061254f565b6118e8611cbc565b610db2611cbc565b600054610100900460ff166119175760405162461bcd60e51b81526004016108479061254f565b61191f611cbc565b610db2611ce3565b6040516001600160a01b038085166024830152831660448201526064810182905261195f9085906323b872dd60e01b90608401611451565b50505050565b60008260a0015142111561197e575060a0820151611981565b50425b815460008115611a0f57670de0b6b3a76400006119a46301e13380612710612337565b670de0b6b3a764000087604001516119bc9190612337565b60018701546119cb9087612356565b6119d59190612337565b6119df919061236d565b6119e99084612337565b6119f3919061236d565b905080846002016000828254611a09919061238f565b90915550505b505060019091015550565b6000611a6f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d139092919063ffffffff16565b805190915015610a8a5780806020019051810190611a8d919061259a565b610a8a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610847565b803b611b505760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610847565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b611bf05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610847565b600080846001600160a01b031684604051611c0b91906125b7565b600060405180830381855af49150503d8060008114611c46576040519150601f19603f3d011682016040523d82523d6000602084013e611c4b565b606091505b5091509150611c7382826040518060600160405280602781526020016125e760279139611d2c565b95945050505050565b611c8581611aec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff16610db25760405162461bcd60e51b81526004016108479061254f565b600054610100900460ff16611d0a5760405162461bcd60e51b81526004016108479061254f565b610db233611867565b6060611d228484600085611d65565b90505b9392505050565b60608315611d3b575081611d25565b825115611d4b5782518084602001fd5b8160405162461bcd60e51b815260040161084791906125d3565b606082471015611dc65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610847565b843b611e145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610847565b600080866001600160a01b03168587604051611e3091906125b7565b60006040518083038185875af1925050503d8060008114611e6d576040519150601f19603f3d011682016040523d82523d6000602084013e611e72565b606091505b5091509150611e82828286611d2c565b979650505050505050565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b600060208284031215611ee757600080fd5b5035919050565b80516001600160a01b0390811683526020808301519091169083015260408082015190830152606080820151908301526080808201519083015260a090810151910152565b60c0810161079f8284611eee565b80356001600160a01b0381168114611f5857600080fd5b919050565b60008060408385031215611f7057600080fd5b611f7983611f41565b946020939093013593505050565b600060208284031215611f9957600080fd5b611d2582611f41565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fe157611fe1611fa2565b604052919050565b600067ffffffffffffffff82111561200357612003611fa2565b50601f01601f191660200190565b6000806040838503121561202457600080fd5b61202d83611f41565b9150602083013567ffffffffffffffff81111561204957600080fd5b8301601f8101851361205a57600080fd5b803561206d61206882611fe9565b611fb8565b81815286602083850101111561208257600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806000606084860312156120b757600080fd5b6120c084611f41565b95602085013595506040909401359392505050565b600080604083850312156120e857600080fd5b823591506120f860208401611f41565b90509250929050565b60005b8381101561211c578181015183820152602001612104565b8381111561195f5750506000910152565b60008151808452612145816020860160208601612101565b601f01601f19169290920160200192915050565b604080825283519082018190526000906020906060840190828701845b8281101561219c57612189848351611eee565b60c0939093019290840190600101612176565b50505083810382850152845180825282820190600581901b8301840187850160005b838110156121ec57601f198684030185526121da83835161212d565b948701949250908601906001016121be565b50909998505050505050505050565b80151581146109c257600080fd5b6000806040838503121561221c57600080fd5b82359150602083013561222e816121fb565b809150509250929050565b6000806040838503121561224c57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561227357600080fd5b61227c86611f41565b945061228a60208701611f41565b94979496505050506040830135926060810135926080909101359150565b6020808252825182820181905260009190848201906040850190845b818110156122e0578351835292840192918401916001016122c4565b50909695505050505050565b60008060006060848603121561230157600080fd5b833592506020840135915061231860408501611f41565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561235157612351612321565b500290565b60008282101561236857612368612321565b500390565b60008261238a57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156123a2576123a2612321565b500190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561246757600080fd5b815167ffffffffffffffff81111561247e57600080fd5b8201601f8101841361248f57600080fd5b805161249d61206882611fe9565b8181528560208385010111156124b257600080fd5b611c73826020830160208601612101565b600083516124d5818460208801612101565b602f60f81b90830190815283516124f3816001840160208801612101565b01600101949350505050565b600060001982141561251357612513612321565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156125ac57600080fd5b8151611d25816121fb565b600082516125c9818460208701612101565b9190910192915050565b602081526000611d25602083018461212d56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220406b47e08a8cc7d2e8fe253363446edb5af00ca4cdf03321c9fadbf820f6955664736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c8063715018a6116100ec578063ab3c7e521161008a578063bdf2a43c11610064578063bdf2a43c1461054b578063c84aae171461058b578063d68f265f146105b8578063f2fde38b146105d857600080fd5b8063ab3c7e5214610480578063ac4afa3814610496578063bdd071fb1461052b57600080fd5b80638129fc1c116100c65780638129fc1c1461040757806385ac165a1461041c5780638da5cb5b1461043c578063aaf5eb681461046457600080fd5b8063715018a6146103b2578063716f02c0146103c75780637b0472f0146103e757600080fd5b806358e9a815116101595780636099ecb2116101335780636099ecb2146102d5578063667832501461030d578063673a2a1f1461036f57806367c041e31461039257600080fd5b806358e9a815146102705780635dcc939114610290578063602ae8a8146102a857600080fd5b8063068bcd8d146101a157806308b1e6b9146101d75780632b3ba681146102055780632e17de781461021b5780633659cfe61461023d5780634f1ef2861461025d575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004611ed5565b6105f8565b6040516101ce9190611f33565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004611f5d565b610665565b6040519081526020016101ce565b34801561021157600080fd5b506101f761271081565b34801561022757600080fd5b5061023b610236366004611ed5565b6107a5565b005b34801561024957600080fd5b5061023b610258366004611f87565b6108fc565b61023b61026b366004612011565b6109c5565b34801561027c57600080fd5b5061023b61028b3660046120a2565b610a7f565b34801561029c57600080fd5b506101f76301e1338081565b3480156102b457600080fd5b506101f76102c3366004611ed5565b60cc6020526000908152604090205481565b3480156102e157600080fd5b506101f76102f0366004611f5d565b60ce60209081526000928352604080842090915290825290205481565b34801561031957600080fd5b506103546103283660046120d5565b60cb60209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016101ce565b34801561037b57600080fd5b50610384610a8f565b6040516101ce929190612159565b34801561039e57600080fd5b5061023b6103ad366004612209565b610d34565b3480156103be57600080fd5b5061023b610d7e565b3480156103d357600080fd5b5061023b6103e2366004611ed5565b610db4565b3480156103f357600080fd5b5061023b610402366004612239565b610e17565b34801561041357600080fd5b5061023b610e22565b34801561042857600080fd5b5061023b61043736600461225b565b610eea565b34801561044857600080fd5b506033546040516001600160a01b0390911681526020016101ce565b34801561047057600080fd5b506101f7670de0b6b3a764000081565b34801561048c57600080fd5b506101f760ca5481565b3480156104a257600080fd5b506104f36104b1366004611ed5565b60c9602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593909416939192909186565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c0016101ce565b34801561053757600080fd5b5061023b610546366004612239565b611062565b34801561055757600080fd5b5061057b610566366004611ed5565b60cd6020526000908152604090205460ff1681565b60405190151581526020016101ce565b34801561059757600080fd5b506105ab6105a6366004611f87565b6110ed565b6040516101ce91906122a8565b3480156105c457600080fd5b5061023b6105d33660046122ec565b61119e565b3480156105e457600080fd5b5061023b6105f3366004611f87565b61124a565b610600611e8d565b50600090815260c96020908152604091829020825160c08101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a082015290565b600081815260c960209081526040808320815160c08101835281546001600160a01b0390811682526001808401548216838701526002808501548487015260038501546060808601919091526004860154608086015260059095015460a0850190815289895260cb8852868920938b16895292875285882086519586018752805486529182015496850196909652909401549282019290925291519091908390421115610717575060a082015161071a565b50425b6000670de0b6b3a76400006107356301e13380612710612337565b670de0b6b3a7640000866040015161074d9190612337565b602086015161075c9086612356565b6107669190612337565b610770919061236d565b845161077c9190612337565b610786919061236d565b9050826040015181610798919061238f565b9450505050505b92915050565b600081815260c960209081526040808320815160c08101835281546001600160a01b03908116825260018301541681850152600282015481840152600382015460608201526004820154608082015260059091015460a082015284845260cb83528184203385529092529091208054806108505760405162461bcd60e51b815260206004820152600760248201526630205374616b6560c81b60448201526064015b60405180910390fd5b600084815260c9602052604081206003018054839290610871908490612356565b909155505060a08301514211156108925761088d8484846112e8565b6108a5565b6000600183018190556002830181905582555b82516108bb906001600160a01b03163383611425565b604080518281526020810186905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a250505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109455760405162461bcd60e51b8152600401610847906123a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610977611488565b6001600160a01b03161461099d5760405162461bcd60e51b8152600401610847906123f3565b6109a6816114b6565b604080516000808252602082019092526109c2918391906114e0565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a0e5760405162461bcd60e51b8152600401610847906123a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a40611488565b6001600160a01b031614610a665760405162461bcd60e51b8152600401610847906123f3565b610a6f826114b6565b610a7b828260016114e0565b5050565b610a8a838383611624565b505050565b60ca54606090819060008167ffffffffffffffff811115610ab257610ab2611fa2565b604051908082528060200260200182016040528015610aeb57816020015b610ad8611e8d565b815260200190600190039081610ad05790505b50905060008267ffffffffffffffff811115610b0957610b09611fa2565b604051908082528060200260200182016040528015610b3c57816020015b6060815260200190600190039081610b275790505b50905060005b838114610d2957600081815260c96020908152604091829020825160c08101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a08201528351849083908110610bbe57610bbe61243f565b60200260200101819052506000838281518110610bdd57610bdd61243f565b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4e9190810190612455565b90506000848381518110610c6457610c6461243f565b6020026020010151602001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd59190810190612455565b90508181604051602001610cea9291906124c3565b604051602081830303815290604052848481518110610d0b57610d0b61243f565b6020026020010181905250505080610d22906124ff565b9050610b42565b509094909350915050565b6033546001600160a01b03163314610d5e5760405162461bcd60e51b81526004016108479061251a565b600091825260cd6020526040909120805460ff1916911515919091179055565b6033546001600160a01b03163314610da85760405162461bcd60e51b81526004016108479061251a565b610db26000611867565b565b33600090815260ce60209081526040808320848452825280832080549084905560cc9092528220805491928392610dec908490612356565b9091555050600082815260c96020526040902060010154610a7b906001600160a01b03163383611425565b610a7b338383611624565b600054610100900460ff16610e3d5760005460ff1615610e41565b303b155b610ea45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610847565b600054610100900460ff16158015610ec6576000805461ffff19166101011790555b610ece6118b9565b610ed66118f0565b80156109c2576000805461ff001916905550565b6033546001600160a01b03163314610f145760405162461bcd60e51b81526004016108479061251a565b60ca54818310610f4f5760405162461bcd60e51b81526004016108479060208082526004908201526354494d4560e01b604082015260600190565b846001600160a01b0316866001600160a01b03161415610f9a5760405162461bcd60e51b81526004016108479060208082526004908201526353414d4560e01b604082015260600190565b6040805160c0810182526001600160a01b03808916825287166020820152908101610fc6866064612337565b8152600060208083018290526040808401889052606093840187905285835260c9825291829020845181546001600160a01b039182166001600160a01b0319918216178355928601516001808401805492909316919094161790559184015160028301559183015160038201556080830151600482015560a09092015160059092019190915561105790829061238f565b60ca55505050505050565b600082815260cc60205260408120805483929061108090849061238f565b909155505060408051338152602081018490529081018290527f6e8a19c7bcac2f8ca75d80a333a2cfffd851001c55ba805c58cc66c70d92bd749060600160405180910390a1600082815260c96020526040902060010154610a7b906001600160a01b0316333084611927565b60ca5460609060008167ffffffffffffffff81111561110e5761110e611fa2565b604051908082528060200260200182016040528015611137578160200160208202803683370190505b50905060005b82811461119657600081815260cb602090815260408083206001600160a01b0389168452909152902054825183908390811061117b5761117b61243f565b602090810291909101015261118f816124ff565b905061113d565b509392505050565b6033546001600160a01b031633146111c85760405162461bcd60e51b81526004016108479061251a565b600083815260cc6020526040812080548492906111e6908490612356565b909155505060408051838152602081018590527f630af8b49bb398089a74eacdb08106c528436090bdb35d7302152dc5117df9bd910160405180910390a1600083815260c96020526040902060010154610a8a906001600160a01b03168284611425565b6033546001600160a01b031633146112745760405162461bcd60e51b81526004016108479061251a565b6001600160a01b0381166112d95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610847565b6109c281611867565b3b151590565b6112f28282611965565b6002810180546000918290558183556001830182905584825260cc602052604090912054818110611393576113278282612356565b600086815260cc602090815260409182902092909255805187815291820184905233917fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51910160405180910390a2602084015161138e906001600160a01b03163384611425565b61141e565b61139d8183612356565b33600081815260ce602090815260408083208a845282528083209490945560cc90528281205590517fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f51906113fd9088908590918252602082015260400190565b60405180910390a2602084015161141e906001600160a01b03163383611425565b5050505050565b6040516001600160a01b038316602482015260448101829052610a8a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a1a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146109c25760405162461bcd60e51b81526004016108479061251a565b60006114ea611488565b90506114f584611aec565b6000835111806115025750815b15611513576115118484611b91565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661141e57805460ff191660011781556040516001600160a01b038316602482015261159290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611b91565b50805460ff191681556115a3611488565b6001600160a01b0316826001600160a01b03161461161b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610847565b61141e85611c7c565b600082116116655760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610847565b600081815260c960209081526040808320815160c08101835281546001600160a01b03908116825260018301548116828601526002830154828501526003830154606083015260048301546080830190815260059093015460a083015286865260cb85528386209089168652909352922091519091904210156117205760405162461bcd60e51b815260206004820152601360248201527214dd185ada5b99c81b9bdd081cdd185c9d1959606a1b6044820152606401610847565b600083815260cd602052604090205460ff16156117705760405162461bcd60e51b815260206004820152600e60248201526d14dd185ada5b99c814185d5cd95960921b6044820152606401610847565b8160a0015142106117bc5760405162461bcd60e51b815260206004820152601660248201527529ba30b5b4b733902832b934b7b21034b99037bb32b960511b6044820152606401610847565b6117c68282611965565b838160000160008282546117da919061238f565b9091555050600083815260c960205260408120600301805486929061180090849061238f565b9091555050815161181c906001600160a01b0316333087611927565b60408051858152602081018590526001600160a01b038716917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a25050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166118e05760405162461bcd60e51b81526004016108479061254f565b6118e8611cbc565b610db2611cbc565b600054610100900460ff166119175760405162461bcd60e51b81526004016108479061254f565b61191f611cbc565b610db2611ce3565b6040516001600160a01b038085166024830152831660448201526064810182905261195f9085906323b872dd60e01b90608401611451565b50505050565b60008260a0015142111561197e575060a0820151611981565b50425b815460008115611a0f57670de0b6b3a76400006119a46301e13380612710612337565b670de0b6b3a764000087604001516119bc9190612337565b60018701546119cb9087612356565b6119d59190612337565b6119df919061236d565b6119e99084612337565b6119f3919061236d565b905080846002016000828254611a09919061238f565b90915550505b505060019091015550565b6000611a6f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d139092919063ffffffff16565b805190915015610a8a5780806020019051810190611a8d919061259a565b610a8a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610847565b803b611b505760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610847565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b611bf05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610847565b600080846001600160a01b031684604051611c0b91906125b7565b600060405180830381855af49150503d8060008114611c46576040519150601f19603f3d011682016040523d82523d6000602084013e611c4b565b606091505b5091509150611c7382826040518060600160405280602781526020016125e760279139611d2c565b95945050505050565b611c8581611aec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff16610db25760405162461bcd60e51b81526004016108479061254f565b600054610100900460ff16611d0a5760405162461bcd60e51b81526004016108479061254f565b610db233611867565b6060611d228484600085611d65565b90505b9392505050565b60608315611d3b575081611d25565b825115611d4b5782518084602001fd5b8160405162461bcd60e51b815260040161084791906125d3565b606082471015611dc65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610847565b843b611e145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610847565b600080866001600160a01b03168587604051611e3091906125b7565b60006040518083038185875af1925050503d8060008114611e6d576040519150601f19603f3d011682016040523d82523d6000602084013e611e72565b606091505b5091509150611e82828286611d2c565b979650505050505050565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b600060208284031215611ee757600080fd5b5035919050565b80516001600160a01b0390811683526020808301519091169083015260408082015190830152606080820151908301526080808201519083015260a090810151910152565b60c0810161079f8284611eee565b80356001600160a01b0381168114611f5857600080fd5b919050565b60008060408385031215611f7057600080fd5b611f7983611f41565b946020939093013593505050565b600060208284031215611f9957600080fd5b611d2582611f41565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fe157611fe1611fa2565b604052919050565b600067ffffffffffffffff82111561200357612003611fa2565b50601f01601f191660200190565b6000806040838503121561202457600080fd5b61202d83611f41565b9150602083013567ffffffffffffffff81111561204957600080fd5b8301601f8101851361205a57600080fd5b803561206d61206882611fe9565b611fb8565b81815286602083850101111561208257600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806000606084860312156120b757600080fd5b6120c084611f41565b95602085013595506040909401359392505050565b600080604083850312156120e857600080fd5b823591506120f860208401611f41565b90509250929050565b60005b8381101561211c578181015183820152602001612104565b8381111561195f5750506000910152565b60008151808452612145816020860160208601612101565b601f01601f19169290920160200192915050565b604080825283519082018190526000906020906060840190828701845b8281101561219c57612189848351611eee565b60c0939093019290840190600101612176565b50505083810382850152845180825282820190600581901b8301840187850160005b838110156121ec57601f198684030185526121da83835161212d565b948701949250908601906001016121be565b50909998505050505050505050565b80151581146109c257600080fd5b6000806040838503121561221c57600080fd5b82359150602083013561222e816121fb565b809150509250929050565b6000806040838503121561224c57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561227357600080fd5b61227c86611f41565b945061228a60208701611f41565b94979496505050506040830135926060810135926080909101359150565b6020808252825182820181905260009190848201906040850190845b818110156122e0578351835292840192918401916001016122c4565b50909695505050505050565b60008060006060848603121561230157600080fd5b833592506020840135915061231860408501611f41565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561235157612351612321565b500290565b60008282101561236857612368612321565b500390565b60008261238a57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156123a2576123a2612321565b500190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561246757600080fd5b815167ffffffffffffffff81111561247e57600080fd5b8201601f8101841361248f57600080fd5b805161249d61206882611fe9565b8181528560208385010111156124b257600080fd5b611c73826020830160208601612101565b600083516124d5818460208801612101565b602f60f81b90830190815283516124f3816001840160208801612101565b01600101949350505050565b600060001982141561251357612513612321565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156125ac57600080fd5b8151611d25816121fb565b600082516125c9818460208701612101565b9190910192915050565b602081526000611d25602083018461212d56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220406b47e08a8cc7d2e8fe253363446edb5af00ca4cdf03321c9fadbf820f6955664736f6c634300080c0033",
  "devdoc": {
    "author": "Steer Protocol",
    "details": "This contract is used to reward stakers for their staking time.",
    "kind": "dev",
    "methods": {
      "claimPendingRewards(uint256)": {
        "details": "To claim the pending rewards",
        "params": {
          "poolId": "The id of the pool from which the pending rewards should be claimed"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createPool(address,address,uint256,uint256,uint256)": {
        "details": "To create a staking pool",
        "params": {
          "end": "Ending time for the staking pool",
          "rewardRate": "Rate at which the rewards will be calculated yearly and then multiplied by 100",
          "rewardToken": "Address of the token that will be given as reward",
          "stakingToken": "Address of the token that will be staked",
          "start": "Start time of the staking pool"
        }
      },
      "depositRewards(uint256,uint256)": {
        "details": "To deposit reward tokens that will be given to the stakers.",
        "params": {
          "amount": "The value of tokens that should be added to give out as rewards.",
          "poolId": "The id of the pool in which rewards should be allocated"
        }
      },
      "getPool(uint256)": {
        "details": "To get the pool for given id",
        "returns": {
          "_0": "Pool which has the details for every pool"
        }
      },
      "getPools()": {
        "details": "To get the details for all pools",
        "returns": {
          "_0": "pools which has the details for every pool"
        }
      },
      "getRewardsForAPool(address,uint256)": {
        "details": "To get rewards for a particular address for a particular pool",
        "params": {
          "account": "The address of the account whose reward is to be fetched",
          "poolId": "The id of the pool from which rewards for the account needs to be fetched"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setJobState(uint256,bool)": {
        "details": "To pause or resume a particular staking pool",
        "params": {
          "pause": "The boolean where passing true means pause the pool              and passing false means resume the pool",
          "poolId": "The id of the staking pool that should be paused or resumed"
        }
      },
      "stake(uint256,uint256)": {
        "details": "To stake tokens",
        "params": {
          "amount": "The number of tokens to be staked.",
          "poolId": "The id of the pool in which tokens should be staked."
        }
      },
      "stakeFor(address,uint256,uint256)": {
        "details": "To stake tokens",
        "params": {
          "amount": "The number of tokens to be staked.",
          "poolId": "The id of the pool in which tokens should be staked.",
          "user": "The address that stake tokens for."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "details": "To unstake staked tokens.",
        "params": {
          "poolId": "The id of pool from which the tokens whould be unstaked."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawRewards(uint256,uint256,address)": {
        "details": "To withdraw the extra rewards that remains on the contract      and can only be called by owner of this contract.",
        "params": {
          "amount": "The value of tokens that should be removed from the contract.",
          "poolId": "The id of the pool in which rewards should be withdrawn",
          "receiver": "The address where the withdrawn tokens should be sent"
        }
      }
    },
    "title": "Staking reward contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1030,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1033,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5274,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1012,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1207,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11779,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "pools",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_struct(Pool)15725_storage)"
      },
      {
        "astId": 11781,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "totalPools",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 11788,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "userInfoPerPool",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15732_storage))"
      },
      {
        "astId": 11792,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "totalRewardsPerPool",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11796,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "isPaused",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 11802,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "pendingRewards",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)15732_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakingRewards.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)15732_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15732_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IStakingRewards.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)15732_storage)"
      },
      "t_mapping(t_uint256,t_struct(Pool)15725_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStakingRewards.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)15725_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)15725_storage": {
        "encoding": "inplace",
        "label": "struct IStakingRewards.Pool",
        "members": [
          {
            "astId": 15714,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "stakingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15716,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "rewardToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15718,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "rewardRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15720,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "totalAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15722,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "start",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15724,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "end",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)15732_storage": {
        "encoding": "inplace",
        "label": "struct IStakingRewards.UserInfo",
        "members": [
          {
            "astId": 15727,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15729,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "lastRewarded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15731,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}