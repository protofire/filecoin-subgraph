{
  "address": "0x2DBca2283f74cB663d1E0E7A85dFf46938B24c87",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bundle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "host",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "source",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "output",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "infoHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "BundleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "toggle",
          "type": "bool"
        }
      ],
      "name": "BundleStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bundles",
      "outputs": [
        {
          "internalType": "string",
          "name": "bundle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "host",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "output",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "info",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bundle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_source",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_host",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_output",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_infoHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_adapter",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_remainActive",
          "type": "bool"
        }
      ],
      "name": "setAdapterState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeed22bd788083c4db8e5e244899060e2f1b48812ed8f2584bb3ef4f314aa2b70",
  "receipt": {
    "to": null,
    "from": "0x2745ec614C23854DdD02CB881f2e1b24ADa8c35C",
    "contractAddress": "0x2DBca2283f74cB663d1E0E7A85dFf46938B24c87",
    "transactionIndex": 1,
    "gasUsed": "1571211",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5fb7a10c74a9d53ee432f00bd2e9e24dbfa8acf57d89c31dd9b4158e7f8f1c3e",
    "transactionHash": "0xeed22bd788083c4db8e5e244899060e2f1b48812ed8f2584bb3ef4f314aa2b70",
    "logs": [],
    "blockNumber": 8886185,
    "cumulativeGasUsed": "1635212",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "412a8f2cb6c64662ec4ec37c56f333b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bundle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"infoHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"BundleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"BundleStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bundles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"bundle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bundle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_host\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_output\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_infoHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_adapter\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_remainActive\",\"type\":\"bool\"}],\"name\":\"setAdapterState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the registeration of bundles\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"register(string,string,string,string,string,bool)\":{\"details\":\"Registers an execution bundle, making data accessible to nodes.      Once registered, each bundle is immutable.      Only the contract owner can change it, and they can only      deactivate/reactivate it if necessary.\",\"params\":{\"_active\":\"Determines if the adapter is active or not, allows for inactive sources                to be deprecated, vaults can pause based on this\",\"_bundle\":\"The bundle of the transformation module.\",\"_host\":\"The host of the transformation module source (e.g. \\\"Uniswap\\\" or \\\"@random-twitter-username\\\")\",\"_output\":\"The output type of the adapter, example: OHLC, OHLCV, SingleValue, etc.\",\"_source\":\"The source of the transformation module source (e.g. \\\"The Graph\\\" or \\\"Twitter\\\")\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAdapterState(bytes32,bool)\":{\"details\":\"onlyOwner function to deprecate (or reactivate) an existing adapter.\",\"params\":{\"_adapter\":\"The key of the adapter to pause.\",\"_remainActive\":\"Whether to pause or unpause; false to pause.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BundleRegistry.sol\":\"BundleRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"contracts/BundleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.12;\\r\\n\\r\\n// Proxy Support\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport { IBundleRegistry } from \\\"./interfaces/IBundleRegistry.sol\\\";\\r\\n\\r\\ncontract BundleRegistry is\\r\\n    IBundleRegistry,\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    PausableUpgradeable\\r\\n{\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer() {}\\r\\n\\r\\n    // Storage\\r\\n\\r\\n    mapping(bytes32 => DataSourceAdapter) public bundles;\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        __Ownable_init();\\r\\n        __Pausable_init();\\r\\n    }\\r\\n\\r\\n    /// @dev Registers an execution bundle, making data accessible to nodes.\\r\\n    ///      Once registered, each bundle is immutable.\\r\\n    ///      Only the contract owner can change it, and they can only\\r\\n    ///      deactivate/reactivate it if necessary.\\r\\n    /// @param _bundle The bundle of the transformation module.\\r\\n    /// @param _source The source of the transformation module source (e.g. \\\"The Graph\\\" or \\\"Twitter\\\")\\r\\n    /// @param _host The host of the transformation module source (e.g. \\\"Uniswap\\\" or \\\"@random-twitter-username\\\")\\r\\n    /// @param _output The output type of the adapter, example: OHLC, OHLCV, SingleValue, etc.\\r\\n    /// @param _active Determines if the adapter is active or not, allows for inactive sources\\r\\n    ///                to be deprecated, vaults can pause based on this\\r\\n    function register(\\r\\n        string memory _bundle,\\r\\n        string memory _source,\\r\\n        string memory _host,\\r\\n        string memory _output,\\r\\n        string memory _infoHash,\\r\\n        bool _active\\r\\n    ) external whenNotPaused {\\r\\n        require(isIPFS(_bundle), \\\"Bundle must be an IPFS CID hash\\\");\\r\\n\\r\\n        bytes32 bundleHash = keccak256(\\r\\n            abi.encode(_bundle, _source, _host, _output)\\r\\n        );\\r\\n\\r\\n        // Check that bundle does not yet have an author--proxy\\r\\n        // to check whether the bundle was already registered.\\r\\n\\r\\n        require(\\r\\n            bundles[bundleHash].author == address(0),\\r\\n            \\\"Bundle already registered\\\"\\r\\n        );\\r\\n\\r\\n        // Record bundle\\r\\n        bundles[bundleHash] = DataSourceAdapter({\\r\\n            bundle: _bundle,\\r\\n            source: _source,\\r\\n            host: _host,\\r\\n            output: _output,\\r\\n            info: _infoHash,\\r\\n            active: _active,\\r\\n            author: _msgSender()\\r\\n        });\\r\\n\\r\\n        // Emit the event that the bundle was created\\r\\n        emit BundleRegistered(\\r\\n            bundleHash,\\r\\n            _bundle,\\r\\n            _host,\\r\\n            _source,\\r\\n            _output,\\r\\n            _infoHash,\\r\\n            _active,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(\\r\\n        address newImplementation\\r\\n    ) internal override onlyOwner {}\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @dev onlyOwner function to deprecate (or reactivate) an existing adapter.\\r\\n    /// @param _adapter The key of the adapter to pause.\\r\\n    /// @param _remainActive Whether to pause or unpause; false to pause.\\r\\n    function setAdapterState(\\r\\n        bytes32 _adapter,\\r\\n        bool _remainActive\\r\\n    ) external onlyOwner {\\r\\n        bundles[_adapter].active = _remainActive;\\r\\n        emit BundleStateChange(_adapter, _remainActive);\\r\\n    }\\r\\n\\r\\n    /// @dev Checks if the passed string is a IPFS link or not.\\r\\n    /// @param source String that needs to checked.\\r\\n    /// @return true if the string passed is IPFS, else it will return false.\\r\\n    function isIPFS(string memory source) internal pure returns (bool) {\\r\\n        bytes memory sourceToBytes = bytes(source);\\r\\n        require(sourceToBytes.length == 46, \\\"Length\\\");\\r\\n        bytes memory firstChar = new bytes(1);\\r\\n        bytes memory secondChar = new bytes(1);\\r\\n        bytes memory lastChar = new bytes(1);\\r\\n        firstChar[0] = sourceToBytes[0];\\r\\n        secondChar[0] = sourceToBytes[1];\\r\\n        lastChar[0] = sourceToBytes[45];\\r\\n        return\\r\\n            keccak256(firstChar) == keccak256(bytes(\\\"Q\\\")) &&\\r\\n            keccak256(secondChar) == keccak256(bytes(\\\"m\\\")) &&\\r\\n            (keccak256(lastChar) != keccak256(bytes(\\\"O\\\")) &&\\r\\n                keccak256(lastChar) != keccak256(bytes(\\\"I\\\")) &&\\r\\n                keccak256(lastChar) != keccak256(bytes(\\\"l\\\")));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9a8d9b342b8507d49896a06b5421b93cc2f398d8204c9db7028b746732507473\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBundleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IBundleRegistry {\\r\\n    // Need to update contract!\\r\\n    // Data Source Adapter\\r\\n    // source: Source name, example: TheGraph\\r\\n    // host: Host url or ip, example: https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3\\r\\n    // output: The output type of the adapter, example: OHLC, OHLCV, SingleValue, etc.\\r\\n    // bundle: (cid example: QmVj...DAwMA)\\r\\n    // active: determines if the adapter is active or not, allows for inactive sources to be deprecated, vaults can pause based on this\\r\\n    struct DataSourceAdapter {\\r\\n        string bundle;\\r\\n        string source;\\r\\n        string host;\\r\\n        string output;\\r\\n        string info;\\r\\n        bool active;\\r\\n        address author;\\r\\n    }\\r\\n\\r\\n    event BundleRegistered(\\r\\n        bytes32 hash,\\r\\n        string bundle,\\r\\n        string host,\\r\\n        string source,\\r\\n        string output,\\r\\n        string infoHash,\\r\\n        bool active,\\r\\n        address creator\\r\\n    );\\r\\n\\r\\n    event BundleStateChange(bytes32 hash, bool toggle);\\r\\n\\r\\n    /// @dev Registers an execution bundle, printing an NFT and mapping to execution bundle and host.\\r\\n    /// @param _bundle the bundle of the transformation module.\\r\\n    /// @param _source The host of the transformation module source (e.g. \\\"Uniswap\\\")\\r\\n    /// @param _host The host of the transformation module source (e.g. \\\"Uniswap\\\")\\r\\n    /// @param _output The output type of the adapter, example: OHLC, OHLCV, SingleValue, etc.\\r\\n    /// @param _active determines if the adapter is active or not, allows for inactive sources to be deprecated, vaults can pause based on this\\r\\n    function register(\\r\\n        string memory _bundle,\\r\\n        string memory _source,\\r\\n        string memory _host,\\r\\n        string memory _output,\\r\\n        string memory _infoHash,\\r\\n        bool _active\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Pauses the registeration of bundles\\r\\n    function pause() external;\\r\\n\\r\\n    function setAdapterState(bytes32 _adapter, bool _remainActive) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb95ccf417054de435bb377489c16487861a628752d700f2d0975bd24e8505d97\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff16620000335760005460ff16156200003d565b6200003d620000e2565b620000a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c8576000805461ffff19166101011790555b8015620000db576000805461ff00191690555b5062000106565b6000620000fa306200010060201b62000b6d1760201c565b15905090565b3b151590565b608051611aff62000137600039600081816102030152818161024c015281816102d501526103150152611aff6000f3fe60806040526004361061009c5760003560e01c80638456cb59116100645780638456cb59146101285780638da5cb5b1461013d57806393862c3b14610165578063bb33fc5a14610198578063e46ce338146101b8578063f2fde38b146101d857600080fd5b80633659cfe6146100a15780634f1ef286146100c35780635c975abb146100d6578063715018a6146100fe5780638129fc1c14610113575b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046114e1565b6101f8565b005b6100c16100d1366004611588565b6102ca565b3480156100e257600080fd5b5060c95460ff1660405190151581526020015b60405180910390f35b34801561010a57600080fd5b506100c1610384565b34801561011f57600080fd5b506100c16103ba565b34801561013457600080fd5b506100c161048a565b34801561014957600080fd5b506033546040516001600160a01b0390911681526020016100f5565b34801561017157600080fd5b506101856101803660046115ea565b6104bc565b6040516100f5979695949392919061165f565b3480156101a457600080fd5b506100c16101b3366004611715565b6107ac565b3480156101c457600080fd5b506100c16101d33660046117f6565b610a4f565b3480156101e457600080fd5b506100c16101f33660046114e1565b610ad5565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561024a5760405162461bcd60e51b815260040161024190611822565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661027c610b73565b6001600160a01b0316146102a25760405162461bcd60e51b81526004016102419061186e565b6102ab81610ba1565b604080516000808252602082019092526102c791839190610bcb565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103135760405162461bcd60e51b815260040161024190611822565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610345610b73565b6001600160a01b03161461036b5760405162461bcd60e51b81526004016102419061186e565b61037482610ba1565b61038082826001610bcb565b5050565b6033546001600160a01b031633146103ae5760405162461bcd60e51b8152600401610241906118ba565b6103b86000610d16565b565b600054610100900460ff166103d55760005460ff16156103d9565b303b155b61043c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610241565b600054610100900460ff1615801561045e576000805461ffff19166101011790555b610466610d68565b61046e610d9f565b610476610dd6565b80156102c7576000805461ff001916905550565b6033546001600160a01b031633146104b45760405162461bcd60e51b8152600401610241906118ba565b6103b8610e0d565b60fb602052600090815260409020805481906104d7906118ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610503906118ef565b80156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b505050505090806001018054610565906118ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610591906118ef565b80156105de5780601f106105b3576101008083540402835291602001916105de565b820191906000526020600020905b8154815290600101906020018083116105c157829003601f168201915b5050505050908060020180546105f3906118ef565b80601f016020809104026020016040519081016040528092919081815260200182805461061f906118ef565b801561066c5780601f106106415761010080835404028352916020019161066c565b820191906000526020600020905b81548152906001019060200180831161064f57829003601f168201915b505050505090806003018054610681906118ef565b80601f01602080910402602001604051908101604052809291908181526020018280546106ad906118ef565b80156106fa5780601f106106cf576101008083540402835291602001916106fa565b820191906000526020600020905b8154815290600101906020018083116106dd57829003601f168201915b50505050509080600401805461070f906118ef565b80601f016020809104026020016040519081016040528092919081815260200182805461073b906118ef565b80156107885780601f1061075d57610100808354040283529160200191610788565b820191906000526020600020905b81548152906001019060200180831161076b57829003601f168201915b5050506005909301549192505060ff8116906001600160a01b036101009091041687565b60c95460ff16156107f25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610241565b6107fb86610ea5565b6108475760405162461bcd60e51b815260206004820152601f60248201527f42756e646c65206d75737420626520616e2049504653204349442068617368006044820152606401610241565b600086868686604051602001610860949392919061192a565b60408051601f198184030181529181528151602092830120600081815260fb90935291206005015490915061010090046001600160a01b0316156108e65760405162461bcd60e51b815260206004820152601960248201527f42756e646c6520616c72656164792072656769737465726564000000000000006044820152606401610241565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001831515815260200161091e3390565b6001600160a01b03169052600082815260fb6020908152604090912082518051919261094f9284929091019061142c565b506020828101518051610968926001850192019061142c565b506040820151805161098491600284019160209091019061142c565b50606082015180516109a091600384019160209091019061142c565b50608082015180516109bc91600484019160209091019061142c565b5060a08201516005909101805460c0909301516001600160a01b031661010002610100600160a81b0319921515929092166001600160a81b0319909316929092171790556040517f5fefd2860204ab13d9368d6ab8443f8309bb482e9a1e8e0bc446b23bec45526a90610a3e9083908a9089908b908a908a908a903390611982565b60405180910390a150505050505050565b6033546001600160a01b03163314610a795760405162461bcd60e51b8152600401610241906118ba565b600082815260fb6020908152604091829020600501805460ff19168415159081179091558251858152918201527fc80d6f7f8fc35e11b52ccc6cf7c43f25a29550fa950ab77a857c56557d065faf910160405180910390a15050565b6033546001600160a01b03163314610aff5760405162461bcd60e51b8152600401610241906118ba565b6001600160a01b038116610b645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610241565b6102c781610d16565b3b151590565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146102c75760405162461bcd60e51b8152600401610241906118ba565b6000610bd5610b73565b9050610be084611192565b600083511180610bed5750815b15610bfe57610bfc8484611237565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610d0f57805460ff191660011781556040516001600160a01b0383166024820152610c7d90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611237565b50805460ff19168155610c8e610b73565b6001600160a01b0316826001600160a01b031614610d065760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610241565b610d0f85611322565b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610d8f5760405162461bcd60e51b815260040161024190611a12565b610d97611362565b6103b8611362565b600054610100900460ff16610dc65760405162461bcd60e51b815260040161024190611a12565b610dce611362565b6103b8611389565b600054610100900460ff16610dfd5760405162461bcd60e51b815260040161024190611a12565b610e05611362565b6103b86113b9565b60c95460ff1615610e535760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610241565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e883390565b6040516001600160a01b03909116815260200160405180910390a1565b80516000908290602e14610ee45760405162461bcd60e51b8152602060048201526006602482015265098cadccee8d60d31b6044820152606401610241565b604080516001808252818301909252600091602082018180368337505060408051600180825281830190925292935060009291506020820181803683375050604080516001808252818301909252929350600092915060208201818036833701905050905083600081518110610f5c57610f5c611a5d565b602001015160f81c60f81b83600081518110610f7a57610f7a611a5d565b60200101906001600160f81b031916908160001a90535083600181518110610fa457610fa4611a5d565b602001015160f81c60f81b82600081518110610fc257610fc2611a5d565b60200101906001600160f81b031916908160001a90535083602d81518110610fec57610fec611a5d565b602001015160f81c60f81b8160008151811061100a5761100a611a5d565b60200101906001600160f81b031916908160001a9053506040805180820190915260018152605160f81b6020918201528351908401207ffbf3cc6079e09a6a2a778706898aef91b633ff613801d212e0afe7f411ddb1d21480156110ab57506040805180820190915260018152606d60f81b6020918201528251908301207fdaba8c984363447d18bf8210079973ac8fc1ce76864315b5baacf246bf6e72f6145b801561118857506040805180820190915260018152604f60f81b6020918201528151908201207fc669aa98d5975cc43653c879a18d9bc4aa8bf51e69f61aeb1d7769216f98009a1480159061113e57506040805180820190915260018152604960f81b6020918201528151908201207f8d61ecf6e15472e15b1a0f63cd77f62aa57e6edcd3871d7a841f1056fb42b21614155b801561118857506040805180820190915260018152601b60fa1b6020918201528151908201207f6a0d259bd4fb907339fd7c65a133083c1e9554f2ca6325b806612c8df6d7df2214155b9695505050505050565b803b6111f65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610241565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6112965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610241565b600080846001600160a01b0316846040516112b19190611a73565b600060405180830381855af49150503d80600081146112ec576040519150601f19603f3d011682016040523d82523d6000602084013e6112f1565b606091505b50915091506113198282604051806060016040528060278152602001611aa3602791396113ec565b95945050505050565b61132b81611192565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166103b85760405162461bcd60e51b815260040161024190611a12565b600054610100900460ff166113b05760405162461bcd60e51b815260040161024190611a12565b6103b833610d16565b600054610100900460ff166113e05760405162461bcd60e51b815260040161024190611a12565b60c9805460ff19169055565b606083156113fb575081611425565b82511561140b5782518084602001fd5b8160405162461bcd60e51b81526004016102419190611a8f565b9392505050565b828054611438906118ef565b90600052602060002090601f01602090048101928261145a57600085556114a0565b82601f1061147357805160ff19168380011785556114a0565b828001600101855582156114a0579182015b828111156114a0578251825591602001919060010190611485565b506114ac9291506114b0565b5090565b5b808211156114ac57600081556001016114b1565b80356001600160a01b03811681146114dc57600080fd5b919050565b6000602082840312156114f357600080fd5b611425826114c5565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561152d5761152d6114fc565b604051601f8501601f19908116603f01168101908282118183101715611555576115556114fc565b8160405280935085815286868601111561156e57600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561159b57600080fd5b6115a4836114c5565b9150602083013567ffffffffffffffff8111156115c057600080fd5b8301601f810185136115d157600080fd5b6115e085823560208401611512565b9150509250929050565b6000602082840312156115fc57600080fd5b5035919050565b60005b8381101561161e578181015183820152602001611606565b8381111561162d576000848401525b50505050565b6000815180845261164b816020860160208601611603565b601f01601f19169290920160200192915050565b60e08152600061167260e083018a611633565b8281036020840152611684818a611633565b905082810360408401526116988189611633565b905082810360608401526116ac8188611633565b905082810360808401526116c08187611633565b94151560a084015250506001600160a01b039190911660c09091015295945050505050565b600082601f8301126116f657600080fd5b61142583833560208501611512565b803580151581146114dc57600080fd5b60008060008060008060c0878903121561172e57600080fd5b863567ffffffffffffffff8082111561174657600080fd5b6117528a838b016116e5565b9750602089013591508082111561176857600080fd5b6117748a838b016116e5565b9650604089013591508082111561178a57600080fd5b6117968a838b016116e5565b955060608901359150808211156117ac57600080fd5b6117b88a838b016116e5565b945060808901359150808211156117ce57600080fd5b506117db89828a016116e5565b9250506117ea60a08801611705565b90509295509295509295565b6000806040838503121561180957600080fd5b8235915061181960208401611705565b90509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061190357607f821691505b6020821081141561192457634e487b7160e01b600052602260045260246000fd5b50919050565b60808152600061193d6080830187611633565b828103602084015261194f8187611633565b905082810360408401526119638186611633565b905082810360608401526119778185611633565b979650505050505050565b60006101008a835280602084015261199c8184018b611633565b905082810360408401526119b0818a611633565b905082810360608401526119c48189611633565b905082810360808401526119d88188611633565b905082810360a08401526119ec8187611633565b94151560c084015250506001600160a01b039190911660e0909101529695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008251611a85818460208701611603565b9190910192915050565b602081526000611425602083018461163356fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ac129df6c2a6a71b0120b9ba27ef15b08b208d2405a8dc410b3573ad50b78ca564736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80638456cb59116100645780638456cb59146101285780638da5cb5b1461013d57806393862c3b14610165578063bb33fc5a14610198578063e46ce338146101b8578063f2fde38b146101d857600080fd5b80633659cfe6146100a15780634f1ef286146100c35780635c975abb146100d6578063715018a6146100fe5780638129fc1c14610113575b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046114e1565b6101f8565b005b6100c16100d1366004611588565b6102ca565b3480156100e257600080fd5b5060c95460ff1660405190151581526020015b60405180910390f35b34801561010a57600080fd5b506100c1610384565b34801561011f57600080fd5b506100c16103ba565b34801561013457600080fd5b506100c161048a565b34801561014957600080fd5b506033546040516001600160a01b0390911681526020016100f5565b34801561017157600080fd5b506101856101803660046115ea565b6104bc565b6040516100f5979695949392919061165f565b3480156101a457600080fd5b506100c16101b3366004611715565b6107ac565b3480156101c457600080fd5b506100c16101d33660046117f6565b610a4f565b3480156101e457600080fd5b506100c16101f33660046114e1565b610ad5565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561024a5760405162461bcd60e51b815260040161024190611822565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661027c610b73565b6001600160a01b0316146102a25760405162461bcd60e51b81526004016102419061186e565b6102ab81610ba1565b604080516000808252602082019092526102c791839190610bcb565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103135760405162461bcd60e51b815260040161024190611822565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610345610b73565b6001600160a01b03161461036b5760405162461bcd60e51b81526004016102419061186e565b61037482610ba1565b61038082826001610bcb565b5050565b6033546001600160a01b031633146103ae5760405162461bcd60e51b8152600401610241906118ba565b6103b86000610d16565b565b600054610100900460ff166103d55760005460ff16156103d9565b303b155b61043c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610241565b600054610100900460ff1615801561045e576000805461ffff19166101011790555b610466610d68565b61046e610d9f565b610476610dd6565b80156102c7576000805461ff001916905550565b6033546001600160a01b031633146104b45760405162461bcd60e51b8152600401610241906118ba565b6103b8610e0d565b60fb602052600090815260409020805481906104d7906118ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610503906118ef565b80156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b505050505090806001018054610565906118ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610591906118ef565b80156105de5780601f106105b3576101008083540402835291602001916105de565b820191906000526020600020905b8154815290600101906020018083116105c157829003601f168201915b5050505050908060020180546105f3906118ef565b80601f016020809104026020016040519081016040528092919081815260200182805461061f906118ef565b801561066c5780601f106106415761010080835404028352916020019161066c565b820191906000526020600020905b81548152906001019060200180831161064f57829003601f168201915b505050505090806003018054610681906118ef565b80601f01602080910402602001604051908101604052809291908181526020018280546106ad906118ef565b80156106fa5780601f106106cf576101008083540402835291602001916106fa565b820191906000526020600020905b8154815290600101906020018083116106dd57829003601f168201915b50505050509080600401805461070f906118ef565b80601f016020809104026020016040519081016040528092919081815260200182805461073b906118ef565b80156107885780601f1061075d57610100808354040283529160200191610788565b820191906000526020600020905b81548152906001019060200180831161076b57829003601f168201915b5050506005909301549192505060ff8116906001600160a01b036101009091041687565b60c95460ff16156107f25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610241565b6107fb86610ea5565b6108475760405162461bcd60e51b815260206004820152601f60248201527f42756e646c65206d75737420626520616e2049504653204349442068617368006044820152606401610241565b600086868686604051602001610860949392919061192a565b60408051601f198184030181529181528151602092830120600081815260fb90935291206005015490915061010090046001600160a01b0316156108e65760405162461bcd60e51b815260206004820152601960248201527f42756e646c6520616c72656164792072656769737465726564000000000000006044820152606401610241565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001831515815260200161091e3390565b6001600160a01b03169052600082815260fb6020908152604090912082518051919261094f9284929091019061142c565b506020828101518051610968926001850192019061142c565b506040820151805161098491600284019160209091019061142c565b50606082015180516109a091600384019160209091019061142c565b50608082015180516109bc91600484019160209091019061142c565b5060a08201516005909101805460c0909301516001600160a01b031661010002610100600160a81b0319921515929092166001600160a81b0319909316929092171790556040517f5fefd2860204ab13d9368d6ab8443f8309bb482e9a1e8e0bc446b23bec45526a90610a3e9083908a9089908b908a908a908a903390611982565b60405180910390a150505050505050565b6033546001600160a01b03163314610a795760405162461bcd60e51b8152600401610241906118ba565b600082815260fb6020908152604091829020600501805460ff19168415159081179091558251858152918201527fc80d6f7f8fc35e11b52ccc6cf7c43f25a29550fa950ab77a857c56557d065faf910160405180910390a15050565b6033546001600160a01b03163314610aff5760405162461bcd60e51b8152600401610241906118ba565b6001600160a01b038116610b645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610241565b6102c781610d16565b3b151590565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146102c75760405162461bcd60e51b8152600401610241906118ba565b6000610bd5610b73565b9050610be084611192565b600083511180610bed5750815b15610bfe57610bfc8484611237565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610d0f57805460ff191660011781556040516001600160a01b0383166024820152610c7d90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611237565b50805460ff19168155610c8e610b73565b6001600160a01b0316826001600160a01b031614610d065760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610241565b610d0f85611322565b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610d8f5760405162461bcd60e51b815260040161024190611a12565b610d97611362565b6103b8611362565b600054610100900460ff16610dc65760405162461bcd60e51b815260040161024190611a12565b610dce611362565b6103b8611389565b600054610100900460ff16610dfd5760405162461bcd60e51b815260040161024190611a12565b610e05611362565b6103b86113b9565b60c95460ff1615610e535760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610241565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e883390565b6040516001600160a01b03909116815260200160405180910390a1565b80516000908290602e14610ee45760405162461bcd60e51b8152602060048201526006602482015265098cadccee8d60d31b6044820152606401610241565b604080516001808252818301909252600091602082018180368337505060408051600180825281830190925292935060009291506020820181803683375050604080516001808252818301909252929350600092915060208201818036833701905050905083600081518110610f5c57610f5c611a5d565b602001015160f81c60f81b83600081518110610f7a57610f7a611a5d565b60200101906001600160f81b031916908160001a90535083600181518110610fa457610fa4611a5d565b602001015160f81c60f81b82600081518110610fc257610fc2611a5d565b60200101906001600160f81b031916908160001a90535083602d81518110610fec57610fec611a5d565b602001015160f81c60f81b8160008151811061100a5761100a611a5d565b60200101906001600160f81b031916908160001a9053506040805180820190915260018152605160f81b6020918201528351908401207ffbf3cc6079e09a6a2a778706898aef91b633ff613801d212e0afe7f411ddb1d21480156110ab57506040805180820190915260018152606d60f81b6020918201528251908301207fdaba8c984363447d18bf8210079973ac8fc1ce76864315b5baacf246bf6e72f6145b801561118857506040805180820190915260018152604f60f81b6020918201528151908201207fc669aa98d5975cc43653c879a18d9bc4aa8bf51e69f61aeb1d7769216f98009a1480159061113e57506040805180820190915260018152604960f81b6020918201528151908201207f8d61ecf6e15472e15b1a0f63cd77f62aa57e6edcd3871d7a841f1056fb42b21614155b801561118857506040805180820190915260018152601b60fa1b6020918201528151908201207f6a0d259bd4fb907339fd7c65a133083c1e9554f2ca6325b806612c8df6d7df2214155b9695505050505050565b803b6111f65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610241565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6112965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610241565b600080846001600160a01b0316846040516112b19190611a73565b600060405180830381855af49150503d80600081146112ec576040519150601f19603f3d011682016040523d82523d6000602084013e6112f1565b606091505b50915091506113198282604051806060016040528060278152602001611aa3602791396113ec565b95945050505050565b61132b81611192565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166103b85760405162461bcd60e51b815260040161024190611a12565b600054610100900460ff166113b05760405162461bcd60e51b815260040161024190611a12565b6103b833610d16565b600054610100900460ff166113e05760405162461bcd60e51b815260040161024190611a12565b60c9805460ff19169055565b606083156113fb575081611425565b82511561140b5782518084602001fd5b8160405162461bcd60e51b81526004016102419190611a8f565b9392505050565b828054611438906118ef565b90600052602060002090601f01602090048101928261145a57600085556114a0565b82601f1061147357805160ff19168380011785556114a0565b828001600101855582156114a0579182015b828111156114a0578251825591602001919060010190611485565b506114ac9291506114b0565b5090565b5b808211156114ac57600081556001016114b1565b80356001600160a01b03811681146114dc57600080fd5b919050565b6000602082840312156114f357600080fd5b611425826114c5565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561152d5761152d6114fc565b604051601f8501601f19908116603f01168101908282118183101715611555576115556114fc565b8160405280935085815286868601111561156e57600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561159b57600080fd5b6115a4836114c5565b9150602083013567ffffffffffffffff8111156115c057600080fd5b8301601f810185136115d157600080fd5b6115e085823560208401611512565b9150509250929050565b6000602082840312156115fc57600080fd5b5035919050565b60005b8381101561161e578181015183820152602001611606565b8381111561162d576000848401525b50505050565b6000815180845261164b816020860160208601611603565b601f01601f19169290920160200192915050565b60e08152600061167260e083018a611633565b8281036020840152611684818a611633565b905082810360408401526116988189611633565b905082810360608401526116ac8188611633565b905082810360808401526116c08187611633565b94151560a084015250506001600160a01b039190911660c09091015295945050505050565b600082601f8301126116f657600080fd5b61142583833560208501611512565b803580151581146114dc57600080fd5b60008060008060008060c0878903121561172e57600080fd5b863567ffffffffffffffff8082111561174657600080fd5b6117528a838b016116e5565b9750602089013591508082111561176857600080fd5b6117748a838b016116e5565b9650604089013591508082111561178a57600080fd5b6117968a838b016116e5565b955060608901359150808211156117ac57600080fd5b6117b88a838b016116e5565b945060808901359150808211156117ce57600080fd5b506117db89828a016116e5565b9250506117ea60a08801611705565b90509295509295509295565b6000806040838503121561180957600080fd5b8235915061181960208401611705565b90509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061190357607f821691505b6020821081141561192457634e487b7160e01b600052602260045260246000fd5b50919050565b60808152600061193d6080830187611633565b828103602084015261194f8187611633565b905082810360408401526119638186611633565b905082810360608401526119778185611633565b979650505050505050565b60006101008a835280602084015261199c8184018b611633565b905082810360408401526119b0818a611633565b905082810360608401526119c48189611633565b905082810360808401526119d88188611633565b905082810360a08401526119ec8187611633565b94151560c084015250506001600160a01b039190911660e0909101529695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008251611a85818460208701611603565b9190910192915050565b602081526000611425602083018461163356fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ac129df6c2a6a71b0120b9ba27ef15b08b208d2405a8dc410b3573ad50b78ca564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the registeration of bundles"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "register(string,string,string,string,string,bool)": {
        "details": "Registers an execution bundle, making data accessible to nodes.      Once registered, each bundle is immutable.      Only the contract owner can change it, and they can only      deactivate/reactivate it if necessary.",
        "params": {
          "_active": "Determines if the adapter is active or not, allows for inactive sources                to be deprecated, vaults can pause based on this",
          "_bundle": "The bundle of the transformation module.",
          "_host": "The host of the transformation module source (e.g. \"Uniswap\" or \"@random-twitter-username\")",
          "_output": "The output type of the adapter, example: OHLC, OHLCV, SingleValue, etc.",
          "_source": "The source of the transformation module source (e.g. \"The Graph\" or \"Twitter\")"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAdapterState(bytes32,bool)": {
        "details": "onlyOwner function to deprecate (or reactivate) an existing adapter.",
        "params": {
          "_adapter": "The key of the adapter to pause.",
          "_remainActive": "Whether to pause or unpause; false to pause."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1030,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1033,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5274,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1012,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1207,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1229,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 1320,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8818,
        "contract": "contracts/BundleRegistry.sol:BundleRegistry",
        "label": "bundles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(DataSourceAdapter)14957_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(DataSourceAdapter)14957_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IBundleRegistry.DataSourceAdapter)",
        "numberOfBytes": "32",
        "value": "t_struct(DataSourceAdapter)14957_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DataSourceAdapter)14957_storage": {
        "encoding": "inplace",
        "label": "struct IBundleRegistry.DataSourceAdapter",
        "members": [
          {
            "astId": 14944,
            "contract": "contracts/BundleRegistry.sol:BundleRegistry",
            "label": "bundle",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 14946,
            "contract": "contracts/BundleRegistry.sol:BundleRegistry",
            "label": "source",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 14948,
            "contract": "contracts/BundleRegistry.sol:BundleRegistry",
            "label": "host",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 14950,
            "contract": "contracts/BundleRegistry.sol:BundleRegistry",
            "label": "output",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 14952,
            "contract": "contracts/BundleRegistry.sol:BundleRegistry",
            "label": "info",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 14954,
            "contract": "contracts/BundleRegistry.sol:BundleRegistry",
            "label": "active",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 14956,
            "contract": "contracts/BundleRegistry.sol:BundleRegistry",
            "label": "author",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}