{
  "address": "0x42e684E6DB074756EC176006468Fd20261CcB275",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "jobHash",
          "type": "bytes32"
        }
      ],
      "name": "EtherUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ethBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetAddress",
          "type": "address"
        }
      ],
      "name": "gasAvailableForTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_orchestrator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stratRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orchestrator",
      "outputs": [
        {
          "internalType": "contract IOrchestrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "originalGas",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "jobHash",
          "type": "bytes32"
        }
      ],
      "name": "reimburseGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyRegistry",
      "outputs": [
        {
          "internalType": "contract IStrategyRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "highGasEstimate",
          "type": "uint256"
        }
      ],
      "name": "transactionsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultRegistry",
      "outputs": [
        {
          "internalType": "contract IVaultRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x134056eec5953cd46d2d360ddfe7031537420d03c5581c03f74d15755d25e4eb",
  "receipt": {
    "to": null,
    "from": "0x2745ec614C23854DdD02CB881f2e1b24ADa8c35C",
    "contractAddress": "0x42e684E6DB074756EC176006468Fd20261CcB275",
    "transactionIndex": 1,
    "gasUsed": "1482317",
    "logsBloom": "0x
    "blockHash": "0x300a0e75face88d26520936be60f99a3952846cc846a7b875c7a14fca78e4045",
    "transactionHash": "0x134056eec5953cd46d2d360ddfe7031537420d03c5581c03f74d15755d25e4eb",
    "logs": [],
    "blockNumber": 8886158,
    "cumulativeGasUsed": "1529230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "de4128423a4eb3f1b17d57738cf295f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobHash\",\"type\":\"bytes32\"}],\"name\":\"EtherUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetAddress\",\"type\":\"address\"}],\"name\":\"gasAvailableForTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orchestrator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stratRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orchestrator\",\"outputs\":[{\"internalType\":\"contract IOrchestrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"jobHash\",\"type\":\"bytes32\"}],\"name\":\"reimburseGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyRegistry\",\"outputs\":[{\"internalType\":\"contract IStrategyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highGasEstimate\",\"type\":\"uint256\"}],\"name\":\"transactionsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRegistry\",\"outputs\":[{\"internalType\":\"contract IVaultRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"vault for storing gas for each strategy. Nodes must still pay gas cost to call, but execution costs  will come out of the gas account.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deposit(address)\":{\"details\":\"Deposit more eth to be used in jobs.      Can only be withdrawn by governance and the given vault,      so in most cases these funds are unretrievable.\",\"params\":{\"targetAddress\":\"address of the recipient of these gas funds\"}},\"gasAvailableForTransaction(address)\":{\"details\":\"Orchestrator calls this function in order to reimburse tx.origin for method gas.      First it checks that all parameters are correct (gas price isn't too high),      And then it returns as much gas as is available to use in the transaction.      Note that this function will revert if the gas price is too high for the strategy.      This should be checked by the keeper beforehand.\",\"params\":{\"_targetAddress\":\"Address actions will be performed on, and address paying gas for those actions.\"},\"returns\":{\"_0\":\"gasAvailable (representing amount of gas available per Method).\"}},\"initialize(address,address,address)\":{\"details\":\"Permanently sets related addresses\",\"params\":{\"_orchestrator\":\"Address of the orchestrator contract\",\"_stratRegistry\":\"Address of the strategy registry contract\",\"_vaultRegistry\":\"Address of the vault registry contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reimburseGas(address,uint256,bytes32)\":{\"details\":\"Note that keepers still have to pull their gas from the GasVault in order      to truly be reimbursed--until then the ETH is just sitting in the GasVault.\",\"params\":{\"jobHash\":\"The hash of the job which was performed.                All vaults other than DynamicJobs can only have one job,                so in this case jobHash will just be actionHash.\",\"originalGas\":\"How much gas there was at the start of the action (before any action was called)\",\"targetAddress\":\"The address which the action was performed upon.                      The reimbursement will come from its gas fund.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transactionsRemaining(address,uint256)\":{\"params\":{\"highGasEstimate\":\"An estimate of the highest reasonable gas price which                        a transaction will cost, in terms of wei.                        In other words, given a bad gas price,                        how many more times can a strategy be run.\",\"targetAddress\":\"The address of the vault in question\"},\"returns\":{\"_0\":\"transactions Remaining, assuming upper limit estimate of gas price                      is used for the transaction\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256,address)\":{\"details\":\"Normal withdraw function, normally used by keepers\",\"params\":{\"amount\":\"The amount to withdraw\",\"to\":\"Address to send the ether to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ethBalances(address)\":{\"notice\":\"Mapping from vault address to gasInfo\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GasVault.sol\":\"GasVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/GasVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"./interfaces/IGasVault.sol\\\";\\r\\nimport \\\"./interfaces/IOrchestrator.sol\\\";\\r\\nimport \\\"./interfaces/IStrategyRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IVaultRegistry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev vault for storing gas for each strategy. Nodes must still pay gas cost to call, but execution costs\\r\\n *  will come out of the gas account.\\r\\n */\\r\\ncontract GasVault is\\r\\n    IGasVault,\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    ReentrancyGuardUpgradeable\\r\\n{\\r\\n    // Storage\\r\\n\\r\\n    IOrchestrator public orchestrator;\\r\\n    IStrategyRegistry public strategyRegistry;\\r\\n    IVaultRegistry public vaultRegistry;\\r\\n\\r\\n    /// @notice Mapping from vault address to gasInfo\\r\\n    mapping(address => uint256) public ethBalances;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer() {}\\r\\n\\r\\n    /// @dev Permanently sets related addresses\\r\\n    /// @param _orchestrator Address of the orchestrator contract\\r\\n    /// @param _stratRegistry Address of the strategy registry contract\\r\\n    /// @param _vaultRegistry Address of the vault registry contract\\r\\n    function initialize(\\r\\n        address _orchestrator,\\r\\n        address _stratRegistry,\\r\\n        address _vaultRegistry\\r\\n    ) public initializer {\\r\\n        __Ownable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        require(_orchestrator != address(0), \\\"address(0)\\\");\\r\\n        require(_stratRegistry != address(0), \\\"address(0)\\\");\\r\\n        require(_vaultRegistry != address(0), \\\"address(0)\\\");\\r\\n        orchestrator = IOrchestrator(_orchestrator);\\r\\n        strategyRegistry = IStrategyRegistry(_stratRegistry);\\r\\n        vaultRegistry = IVaultRegistry(_vaultRegistry);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n    modifier onlyOrchestrator() {\\r\\n        require(\\r\\n            msg.sender == address(orchestrator),\\r\\n            \\\"Only orchestrator can call this\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Deposit more eth to be used in jobs.\\r\\n    ///      Can only be withdrawn by governance and the given vault,\\r\\n    ///      so in most cases these funds are unretrievable.\\r\\n    /// @param targetAddress address of the recipient of these gas funds\\r\\n    function deposit(address targetAddress) external payable override {\\r\\n        ethBalances[targetAddress] += msg.value;\\r\\n        emit Deposited(msg.sender, targetAddress, msg.value);\\r\\n    }\\r\\n\\r\\n    /// @dev Normal withdraw function, normally used by keepers\\r\\n    /// @param amount The amount to withdraw\\r\\n    /// @param to Address to send the ether to\\r\\n    function withdraw(\\r\\n        uint256 amount,\\r\\n        address payable to\\r\\n    ) external override nonReentrant {\\r\\n        ethBalances[msg.sender] -= amount;\\r\\n        emit Withdrawn(msg.sender, to, amount);\\r\\n        AddressUpgradeable.sendValue(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @param targetAddress The address of the vault in question\\r\\n    /// @param highGasEstimate An estimate of the highest reasonable gas price which\\r\\n    ///                        a transaction will cost, in terms of wei.\\r\\n    ///                        In other words, given a bad gas price,\\r\\n    ///                        how many more times can a strategy be run.\\r\\n    /// @return transactions Remaining, assuming upper limit estimate of gas price\\r\\n    ///                      is used for the transaction\\r\\n    function transactionsRemaining(\\r\\n        address targetAddress,\\r\\n        uint256 highGasEstimate\\r\\n    ) external view override returns (uint256) {\\r\\n        IVaultRegistry.VaultData memory vaultInfo = vaultRegistry\\r\\n            .getVaultDetails(targetAddress);\\r\\n        IStrategyRegistry.RegisteredStrategy memory info = strategyRegistry\\r\\n            .getRegisteredStrategy(vaultInfo.tokenId);\\r\\n        if (highGasEstimate > info.maxGasCost) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 totalWeiPerMethod = info.maxGasPerAction * highGasEstimate;\\r\\n            return ethBalances[targetAddress] / totalWeiPerMethod;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Orchestrator calls this function in order to reimburse tx.origin for method gas.\\r\\n    ///      First it checks that all parameters are correct (gas price isn't too high),\\r\\n    ///      And then it returns as much gas as is available to use in the transaction.\\r\\n    ///      Note that this function will revert if the gas price is too high for the strategy.\\r\\n    ///      This should be checked by the keeper beforehand.\\r\\n    /// @param _targetAddress Address actions will be performed on, and address paying gas for those actions.\\r\\n    /// @return gasAvailable (representing amount of gas available per Method).\\r\\n    function gasAvailableForTransaction(\\r\\n        address _targetAddress\\r\\n    ) external view returns (uint256) {\\r\\n        // Get gas info\\r\\n        IVaultRegistry.VaultData memory vaultInfo = vaultRegistry\\r\\n            .getVaultDetails(_targetAddress);\\r\\n        IStrategyRegistry.RegisteredStrategy memory info = strategyRegistry\\r\\n            .getRegisteredStrategy(vaultInfo.tokenId);\\r\\n\\r\\n        // Ensure requested gas use is acceptable.\\r\\n        // wei / gas must be less than maxGasCost,\\r\\n        // and GasVault must have enough ether allotted to pay for action.\\r\\n        require(tx.gasprice <= info.maxGasCost, \\\"Gas too expensive.\\\");\\r\\n\\r\\n        // Represents gas available per action. Gas cost of all methods must be <= this.\\r\\n        uint256 gasAvailable = info.maxGasPerAction;\\r\\n        require(\\r\\n            ethBalances[_targetAddress] >= tx.gasprice * gasAvailable,\\r\\n            \\\"Insufficient ether deposited\\\"\\r\\n        );\\r\\n\\r\\n        // Return gas available\\r\\n        return gasAvailable;\\r\\n    }\\r\\n\\r\\n    /// @dev Note that keepers still have to pull their gas from the GasVault in order\\r\\n    ///      to truly be reimbursed--until then the ETH is just sitting in the GasVault.\\r\\n    /// @param targetAddress The address which the action was performed upon.\\r\\n    ///                      The reimbursement will come from its gas fund.\\r\\n    /// @param originalGas How much gas there was at the start of the action (before any action was called)\\r\\n    /// @param jobHash The hash of the job which was performed.\\r\\n    ///                All vaults other than DynamicJobs can only have one job,\\r\\n    ///                so in this case jobHash will just be actionHash.\\r\\n    function reimburseGas(\\r\\n        address targetAddress,\\r\\n        uint256 originalGas,\\r\\n        bytes32 jobHash\\r\\n    ) external onlyOrchestrator {\\r\\n        // Calculate reimbursement amount\\r\\n        uint256 gasUsed = originalGas - gasleft();\\r\\n        uint256 ethUsed = (gasUsed * tx.gasprice);\\r\\n\\r\\n        // Distribute funds\\r\\n        ethBalances[targetAddress] -= ethUsed;\\r\\n        unchecked {\\r\\n            ethBalances[tx.origin] += ethUsed;\\r\\n        }\\r\\n        emit EtherUsed(targetAddress, ethUsed, jobHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2d872d3a04a55305809641a2084feae90c1cb1ca5c9de1bd563665629a274b9c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGasVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IGasVault {\\r\\n    event Deposited(\\r\\n        address indexed origin,\\r\\n        address indexed target,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Withdrawn(\\r\\n        address indexed targetAddress,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event EtherUsed(address indexed account, uint256 amount, bytes32 jobHash);\\r\\n\\r\\n    function deposit(address targetAddress) external payable;\\r\\n\\r\\n    function withdraw(uint256 amount, address payable to) external;\\r\\n\\r\\n    /**\\r\\n     * @dev calculates total transactions remaining. What this means is--assuming that each method (action paid for by the strategist/job owner)\\r\\n     *      costs max amount of gas at max gas price, and uses the max amount of actions, how many transactions can be paid for?\\r\\n     *      In other words, how many actions can this vault guarantee.\\r\\n     * @param targetAddress is address actions will be performed on, and address paying gas for those actions.\\r\\n     * @param highGasEstimate is highest reasonable gas price assumed for the actions\\r\\n     * @return total transactions remaining, assuming max gas is used in each Method\\r\\n     */\\r\\n    function transactionsRemaining(\\r\\n        address targetAddress,\\r\\n        uint256 highGasEstimate\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @param targetAddress is address actions will be performed on, and address paying gas for those actions.\\r\\n     * @return uint256 gasAvailable (representing amount of gas available per Method).\\r\\n     */\\r\\n    function gasAvailableForTransaction(\\r\\n        address targetAddress\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @param targetAddress is address actions were performed on\\r\\n     * @param originalGas is gas passed in to the action execution order. Used to calculate gas used in the execution.\\r\\n     * @dev should only ever be called by the orchestrator. Is onlyOrchestrator. This and setAsideGas are used to pull gas from the vault for strategy executions.\\r\\n     */\\r\\n    function reimburseGas(\\r\\n        address targetAddress,\\r\\n        uint256 originalGas,\\r\\n        bytes32 newActionHash\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xea0b7eabb8372fa0ecfa3fb34ec653937fcb6ca6fd0a678ea016e734c8798578\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOrchestrator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the Orchestrator.\\r\\n */\\r\\ninterface IOrchestrator {\\r\\n    enum ActionState {\\r\\n        PENDING,\\r\\n        COMPLETED\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev MUST trigger when actions are executed.\\r\\n     * @param actionHash: keccak256(targetAddress, jobEpoch, calldatas) used to identify this action\\r\\n     * @param from: the address of the keeper that executed this action\\r\\n     * @param rewardPerAction: SteerToken reward for this action, to be supplied to operator nodes.\\r\\n     */\\r\\n    event ActionExecuted(\\r\\n        bytes32 indexed actionHash,\\r\\n        address from,\\r\\n        uint256 rewardPerAction\\r\\n    );\\r\\n    event ActionFailed(bytes32 indexed actionHash);\\r\\n    event Vote(\\r\\n        bytes32 indexed actionHash,\\r\\n        address indexed from,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    // If an action is approved by >= approvalThresholdPercent members, it is approved\\r\\n    function actionThresholdPercent() external view returns (uint256);\\r\\n\\r\\n    // Address of GasVault, which is the contract used to recompense keepers for gas they spent executing actions\\r\\n    function gasVault() external view returns (address);\\r\\n\\r\\n    // Address of Keeper Registry, which handles keeper verification\\r\\n    function keeperRegistry() external view returns (address);\\r\\n\\r\\n    // Operator node action participation reward. Currently unused.\\r\\n    function rewardPerAction() external view returns (uint256);\\r\\n\\r\\n    /*\\r\\n        bytes32 is hash of action. Calculated using keccak256(abi.encode(targetAddress, jobEpoch, calldatas))\\r\\n\\r\\n        Action approval meaning:\\r\\n        0: Pending\\r\\n        1: Approved\\r\\n        Both votes and overall approval status follow this standard.\\r\\n    */\\r\\n    function actions(bytes32) external view returns (ActionState);\\r\\n\\r\\n    /*  \\r\\n        actionHash => uint256 where each bit represents one keeper vote.\\r\\n    */\\r\\n    function voteBitmaps(bytes32) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev initialize the Orchestrator\\r\\n     * @param _keeperRegistry address of the keeper registry\\r\\n     * @param _rewardPerAction is # of SteerToken to give to operator nodes for each completed action (currently unused)\\r\\n     */\\r\\n    function initialize(address _keeperRegistry, uint256 _rewardPerAction)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @dev allows owner to set/update gas vault address. Mainly used to resolve mutual dependency.\\r\\n     */\\r\\n    function setGasVault(address _gasVault) external;\\r\\n\\r\\n    /**\\r\\n     * @dev set the reward given to operator nodes for their participation in a strategy calculation\\r\\n     * @param _rewardPerAction is amount of steer token to be earned as a reward, per participating operator node per action.\\r\\n     */\\r\\n    function setRewardPerAction(uint256 _rewardPerAction) external;\\r\\n\\r\\n    /**\\r\\n     * @dev vote (if you are a keeper) on a given action proposal\\r\\n     * @param actionHash is the hash of the action to be voted on\\r\\n     * @param vote is the vote to be cast. false: reject, true: approve. false only has an effect if the keeper previously voted true. It resets their vote to false.\\r\\n     */\\r\\n    function voteOnAction(bytes32 actionHash, bool vote) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if an action with given `actionId` is approved by all existing members of the group.\\r\\n     * It\\u2019s up to the contract creators to decide if this method should look at majority votes (based on ownership)\\r\\n     * or if it should ask consent of all the users irrespective of their ownerships.\\r\\n     */\\r\\n    function actionApprovalStatus(bytes32 actionHash)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Executes the action referenced by the given `actionId` as long as it is approved actionThresholdPercent of group.\\r\\n     * The executeAction executes all methods as part of given action in an atomic way (either all should succeed or none should succeed).\\r\\n     * Once executed, the action should be set as executed (state=3) so that it cannot be executed again.\\r\\n\\r\\n     * @param targetAddress is the address which will be receiving the action's calls.\\r\\n     * @param jobEpoch is the job epoch of this action.\\r\\n     * @param calldatas is the COMPLETE calldata of each method to be called\\r\\n     * note that the hash is created using the sliced calldata, but here it must be complete or the method will revert.\\r\\n     * @param timeIndependentLengths--For each calldata, the number of bytes that is NOT time-sensitive. If no calldatas are time-sensitive, just pass an empty array.\\r\\n     * @param jobHash is the identifier for the job this action is related to. This is used for DynamicJobs to identify separate jobs to the subgraph.\\r\\n     * @return actionState corresponding to post-execution action state. Pending if execution failed, Completed if execution succeeded.\\r\\n     */\\r\\n    function executeAction(\\r\\n        address targetAddress,\\r\\n        uint256 jobEpoch,\\r\\n        bytes[] calldata calldatas,\\r\\n        uint256[] calldata timeIndependentLengths,\\r\\n        bytes32 jobHash\\r\\n    ) external returns (ActionState);\\r\\n}\\r\\n\",\"keccak256\":\"0xc416f20cc7f0e54d878637caa1ef5f1518bfcb7f16089b1e7790d09d96a99373\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.12;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\r\\n\\r\\ninterface IStrategyRegistry is\\r\\n    IERC721Upgradeable,\\r\\n    IERC721EnumerableUpgradeable\\r\\n{\\r\\n    struct RegisteredStrategy {\\r\\n        uint256 id;\\r\\n        string name;\\r\\n        address owner;\\r\\n        string execBundle; //IPFS reference of execution bundle\\r\\n        //GasVault stuff\\r\\n        uint128 maxGasCost;\\r\\n        uint128 maxGasPerAction;\\r\\n    }\\r\\n\\r\\n    function getStrategyAddress(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function getStrategyOwner(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Create NFT for execution bundle.\\r\\n     * @param name The name of the strategy.\\r\\n     * @param execBundle The IPFS reference of the execution bundle.\\r\\n     * @return newStrategyTokenId The token ID of the NFT.\\r\\n     */\\r\\n    function createStrategy(\\r\\n        address strategyCreator,\\r\\n        string memory name,\\r\\n        string memory execBundle,\\r\\n        uint128 maxGasCost,\\r\\n        uint128 maxGasPerAction\\r\\n    ) external returns (uint256 newStrategyTokenId);\\r\\n\\r\\n    //\\r\\n    // Todo: add to utility library\\r\\n    //\\r\\n    function addressToString(address _address)\\r\\n        external\\r\\n        pure\\r\\n        returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses all token transfers.\\r\\n     *\\r\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function pause() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Unpauses all token transfers.\\r\\n     *\\r\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function unpause() external;\\r\\n\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function getRegisteredStrategy(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (IStrategyRegistry.RegisteredStrategy memory);\\r\\n\\r\\n    /**\\r\\n     * @dev parameters users set for what constitutes an acceptable use of their funds. Can only be set by NFT owner.\\r\\n     * @param _tokenId is the token ID of the execution bundle.\\r\\n     * @param _maxGasCost is highest acceptable price to pay per gas, in terms of gwei.\\r\\n     * @param _maxGasPerMethod is max amount of gas to be sent in one method.\\r\\n     * @param _maxMethods is the maximum number of methods that can be executed in one action.\\r\\n     */\\r\\n    function setGasParameters(\\r\\n        uint256 _tokenId,\\r\\n        uint128 _maxGasCost,\\r\\n        uint128 _maxGasPerMethod,\\r\\n        uint16 _maxMethods\\r\\n    ) external;\\r\\n\\r\\n    //function getExecutionBundle(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    function baseURI() external view returns (string memory);\\r\\n\\r\\n    function burn(uint256 tokenId) external;\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x21720b6193fdf055ffcfc4116093456adc4b8c1217974d5ae4d0ddf2f03a046f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.12;\\r\\npragma abicoder v2; //Used this because function getAssetSymbols uses string[2]\\r\\n\\r\\nimport { IStrategyRegistry } from \\\"./IStrategyRegistry.sol\\\";\\r\\nimport { IOrchestrator } from \\\"./IOrchestrator.sol\\\";\\r\\n\\r\\ninterface IVaultRegistry {\\r\\n    /**\\r\\n     * PendingApproval: strategy is submitted but has not yet been approved by the owner\\r\\n     * PendingThreshold: strategy is approved but has not yet reached the threshold of TVL required\\r\\n     * Paused: strategy was active but something went wrong, so now it's paused\\r\\n     * Active: strategy is active and can be used\\r\\n     * Retired: strategy is retired and can no longer be used\\r\\n     */\\r\\n    enum VaultState {\\r\\n        PendingApproval,\\r\\n        PendingThreshold,\\r\\n        Paused,\\r\\n        Active,\\r\\n        Retired\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev all necessary data for vault. Name and symbol are stored in vault's ERC20. Owner is stored with tokenId in StrategyRegistry.\\r\\n     * tokenId: NFT identifier number\\r\\n     * vaultAddress: address of vault this describes\\r\\n     * state: state of the vault.\\r\\n     */\\r\\n    struct VaultData {\\r\\n        VaultState state;\\r\\n        uint256 tokenId; //NFT ownership of this vault and all others that use vault's exec bundle\\r\\n        uint256 vaultID; //unique identifier for this vault and strategy token id\\r\\n        string payloadIpfs;\\r\\n        address vaultAddress;\\r\\n        string beaconName;\\r\\n    }\\r\\n\\r\\n    /// @dev Vault creation event\\r\\n    /// @param deployer The address of the deployer\\r\\n    /// @param vault The address of the vault\\r\\n    /// @param tokenId ERC721 token id for the vault\\r\\n    /// @param vaultManager is the address which will manage the vault being created\\r\\n    event VaultCreated(\\r\\n        address deployer,\\r\\n        address vault,\\r\\n        string beaconName,\\r\\n        uint256 indexed tokenId,\\r\\n        address vaultManager\\r\\n    );\\r\\n\\r\\n    /// @dev Vault state change event\\r\\n    /// @param vault The address of the vault\\r\\n    /// @param newState The new state of the vault\\r\\n    event VaultStateChanged(address indexed vault, VaultState newState);\\r\\n\\r\\n    // Total vault count.\\r\\n    function totalVaultCount() external view returns (uint256);\\r\\n\\r\\n    function whitelistRegistry() external view returns (address);\\r\\n\\r\\n    function orchestrator() external view returns (IOrchestrator);\\r\\n\\r\\n    function beaconAddresses(string calldata) external view returns (address);\\r\\n\\r\\n    function beaconTypes(address) external view returns (string memory);\\r\\n\\r\\n    // Interface for the strategy registry\\r\\n    function strategyRegistry() external view returns (IStrategyRegistry);\\r\\n\\r\\n    /// @dev intializes the vault registry\\r\\n    /// @param _orchestrator The address of the orchestrator\\r\\n    /// @param _strategyRegistry The address of the strategy registry\\r\\n    /// @param _whitelistRegistry The address of the whitelist registry\\r\\n    function initialize(\\r\\n        address _orchestrator,\\r\\n        address _strategyRegistry,\\r\\n        address _whitelistRegistry\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Registers a beacon associated with a new vault type\\r\\n    /// @param _name The name of the vault type this beacon will be using\\r\\n    /// @param _address The address of the upgrade beacon\\r\\n    /// @param _ipfsConfigForBeacon IPFS hash for the config of this beacon\\r\\n    function registerBeacon(\\r\\n        string calldata _name,\\r\\n        address _address,\\r\\n        string calldata _ipfsConfigForBeacon\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Deploy new beacon for a new vault type AND register it\\r\\n    /// @param _address The address of the implementation for the beacon\\r\\n    /// @param _name The name of the beacon (identifier)\\r\\n    /// @param _ipfsConfigForBeacon IPFS hash for the config of this beacon\\r\\n    function deployAndRegisterBeacon(\\r\\n        address _address,\\r\\n        string calldata _name,\\r\\n        string calldata _ipfsConfigForBeacon\\r\\n    ) external returns (address);\\r\\n\\r\\n    /// @dev Removes a beacon associated with a vault type\\r\\n    /// @param _name The name of the beacon (identifier)\\r\\n    /// @dev This will stop the creation of more vaults of the type provided\\r\\n    function deregisterBeacon(string calldata _name) external;\\r\\n\\r\\n    /// @dev Creates a new vault with the given strategy\\r\\n    /// @dev Registers an execution bundle, mints an NFT and mappings it to execution bundle and it's details.\\r\\n    /// @param _params is extra parameters in vault.\\r\\n    /// @param _tokenId is the NFT of the execution bundle this vault will be using.\\r\\n    /// @param _beaconName beacon identifier of vault type to be created\\r\\n    /// @dev owner is set as msg.sender.\\r\\n    function createVault(\\r\\n        bytes memory _params,\\r\\n        uint256 _tokenId,\\r\\n        string memory _beaconName,\\r\\n        address _vaultManager,\\r\\n        string memory strategyData\\r\\n    ) external returns (address);\\r\\n\\r\\n    /// @dev Updates the vault state and emits a VaultStateChanged event\\r\\n    /// @param _vault The address of the vault\\r\\n    /// @param _newState The new state of the vault\\r\\n    /// @dev This function is only available to the registry owner\\r\\n    function updateVaultState(address _vault, VaultState _newState) external;\\r\\n\\r\\n    /// @dev Retrieves the creator of a given vault\\r\\n    /// @param _vault The address of the vault\\r\\n    /// @return The address of the creator\\r\\n    function getStrategyCreatorForVault(\\r\\n        address _vault\\r\\n    ) external view returns (address);\\r\\n\\r\\n    /// @dev This function is only available to the pauser role\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    /// @dev Retrieves the details of a given vault by address\\r\\n    /// @param _address The address of the vault\\r\\n    /// @return The details of the vault\\r\\n    function getVaultDetails(\\r\\n        address _address\\r\\n    ) external view returns (VaultData memory);\\r\\n\\r\\n    /// @dev Retrieves the vault count by vault token id\\r\\n    /// @param _tokenId The token id of the vault\\r\\n    /// @return The count of the vault\\r\\n    function getVaultCountByStrategyId(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @dev Retrieves the vault by vault token id and vault index\\r\\n    /// @param _tokenId The token id of the vault\\r\\n    /// @param _vaultId The index of the vault\\r\\n    /// @return Vault details\\r\\n    function getVaultByStrategyAndIndex(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _vaultId\\r\\n    ) external view returns (VaultData memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x4271b0d711cfd75d931f7b93f39ac2a1797b4f857e2d4211f4316aed8fcee9b9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff16620000335760005460ff16156200003d565b6200003d620000e2565b620000a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c8576000805461ffff19166101011790555b8015620000db576000805461ff00191690555b5062000106565b6000620000fa306200010060201b62000c361760201c565b15905090565b3b151590565b60805161196462000137600039600081816103ba015281816103fa0152818161048301526104c301526119646000f3fe6080604052600436106100e75760003560e01c8063b6e1b3e91161008a578063cdd7b38a11610059578063cdd7b38a14610268578063d080bf2714610288578063f2fde38b146102a8578063f340fa01146102c857600080fd5b8063b6e1b3e9146101e8578063b74795d914610208578063c0c53b8b14610228578063cda08c161461024857600080fd5b80634f1ef286116100c65780634f1ef2861461016e57806361d2be2e14610181578063715018a6146101a15780638da5cb5b146101b657600080fd5b8062f714ce146100ec5780633659cfe61461010e5780633cfba0e31461012e575b600080fd5b3480156100f857600080fd5b5061010c610107366004611296565b6102db565b005b34801561011a57600080fd5b5061010c6101293660046112c6565b6103af565b34801561013a57600080fd5b5061015b6101493660046112c6565b60fe6020526000908152604090205481565b6040519081526020015b60405180910390f35b61010c61017c36600461137b565b610478565b34801561018d57600080fd5b5061015b61019c36600461140e565b610532565b3480156101ad57600080fd5b5061010c61069a565b3480156101c257600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610165565b3480156101f457600080fd5b5061010c61020336600461143a565b6106d0565b34801561021457600080fd5b5060fb546101d0906001600160a01b031681565b34801561023457600080fd5b5061010c61024336600461146f565b6107d8565b34801561025457600080fd5b5061015b6102633660046112c6565b61095b565b34801561027457600080fd5b5060fd546101d0906001600160a01b031681565b34801561029457600080fd5b5060fc546101d0906001600160a01b031681565b3480156102b457600080fd5b5061010c6102c33660046112c6565b610b2e565b61010c6102d63660046112c6565b610bc6565b600260c95414156103335760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260c95533600090815260fe6020526040812080548492906103579084906114d0565b90915550506040518281526001600160a01b0382169033907fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9060200160405180910390a36103a68183610c3c565b5050600160c955565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103f85760405162461bcd60e51b815260040161032a906114e7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661042a610d5a565b6001600160a01b0316146104505760405162461bcd60e51b815260040161032a90611533565b61045981610d88565b6040805160008082526020820190925261047591839190610db2565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104c15760405162461bcd60e51b815260040161032a906114e7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104f3610d5a565b6001600160a01b0316146105195760405162461bcd60e51b815260040161032a90611533565b61052282610d88565b61052e82826001610db2565b5050565b60fd546040516367a44ca360e01b81526001600160a01b03848116600483015260009283929116906367a44ca390602401600060405180830381865afa158015610580573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a8919081019061160f565b60fc54602082015160405163f1eb1a2b60e01b81529293506000926001600160a01b039092169163f1eb1a2b916105e59160040190815260200190565b600060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261062a91908101906116ed565b905080608001516001600160801b031684111561064c57600092505050610694565b6000848260a001516001600160801b031661066791906117bb565b6001600160a01b038716600090815260fe602052604090205490915061068e9082906117da565b93505050505b92915050565b6033546001600160a01b031633146106c45760405162461bcd60e51b815260040161032a906117fc565b6106ce6000610efd565b565b60fb546001600160a01b0316331461072a5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206f7263686573747261746f722063616e2063616c6c207468697300604482015260640161032a565b60005a61073790846114d0565b905060006107453a836117bb565b6001600160a01b038616600090815260fe60205260408120805492935083929091906107729084906114d0565b909155505032600090815260fe602090815260409182902080548401905581518381529081018590526001600160a01b038716917f8df42119868c5e2a521d70014ce6857e311acdcf0669c555b17adf8bb53a313a910160405180910390a25050505050565b600054610100900460ff166107f35760005460ff16156107f7565b303b155b61085a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032a565b600054610100900460ff1615801561087c576000805461ffff19166101011790555b610884610f4f565b61088c610f86565b610894610fbd565b6001600160a01b0384166108ba5760405162461bcd60e51b815260040161032a90611831565b6001600160a01b0383166108e05760405162461bcd60e51b815260040161032a90611831565b6001600160a01b0382166109065760405162461bcd60e51b815260040161032a90611831565b60fb80546001600160a01b038087166001600160a01b03199283161790925560fc805486841690831617905560fd8054928516929091169190911790558015610955576000805461ff00191690555b50505050565b60fd546040516367a44ca360e01b81526001600160a01b03838116600483015260009283929116906367a44ca390602401600060405180830381865afa1580156109a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d1919081019061160f565b60fc54602082015160405163f1eb1a2b60e01b81529293506000926001600160a01b039092169163f1eb1a2b91610a0e9160040190815260200190565b600060405180830381865afa158015610a2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5391908101906116ed565b905080608001516001600160801b03163a1115610aa75760405162461bcd60e51b815260206004820152601260248201527123b0b9903a37b79032bc3832b739b4bb329760711b604482015260640161032a565b60a08101516001600160801b0316610abf813a6117bb565b6001600160a01b038616600090815260fe60205260409020541015610b265760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206574686572206465706f736974656400000000604482015260640161032a565b949350505050565b6033546001600160a01b03163314610b585760405162461bcd60e51b815260040161032a906117fc565b6001600160a01b038116610bbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032a565b61047581610efd565b6001600160a01b038116600090815260fe602052604081208054349290610bee908490611855565b90915550506040513481526001600160a01b0382169033907f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a79060200160405180910390a350565b3b151590565b80471015610c8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161032a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cd9576040519150601f19603f3d011682016040523d82523d6000602084013e610cde565b606091505b5050905080610d555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161032a565b505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146104755760405162461bcd60e51b815260040161032a906117fc565b6000610dbc610d5a565b9050610dc784610fec565b600083511180610dd45750815b15610de557610de38484611091565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610ef657805460ff191660011781556040516001600160a01b0383166024820152610e6490869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611091565b50805460ff19168155610e75610d5a565b6001600160a01b0316826001600160a01b031614610eed5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840161032a565b610ef68561117c565b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610f765760405162461bcd60e51b815260040161032a9061186d565b610f7e6111bc565b6106ce6111e3565b600054610100900460ff16610fad5760405162461bcd60e51b815260040161032a9061186d565b610fb56111bc565b6106ce6111bc565b600054610100900460ff16610fe45760405162461bcd60e51b815260040161032a9061186d565b6106ce611213565b803b6110505760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161032a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6110f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161032a565b600080846001600160a01b03168460405161110b91906118b8565b600060405180830381855af49150503d8060008114611146576040519150601f19603f3d011682016040523d82523d6000602084013e61114b565b606091505b5091509150611173828260405180606001604052806027815260200161190860279139611241565b95945050505050565b61118581610fec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166106ce5760405162461bcd60e51b815260040161032a9061186d565b600054610100900460ff1661120a5760405162461bcd60e51b815260040161032a9061186d565b6106ce33610efd565b600054610100900460ff1661123a5760405162461bcd60e51b815260040161032a9061186d565b600160c955565b6060831561125057508161127a565b8251156112605782518084602001fd5b8160405162461bcd60e51b815260040161032a91906118d4565b9392505050565b6001600160a01b038116811461047557600080fd5b600080604083850312156112a957600080fd5b8235915060208301356112bb81611281565b809150509250929050565b6000602082840312156112d857600080fd5b813561127a81611281565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561131c5761131c6112e3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561134b5761134b6112e3565b604052919050565b600067ffffffffffffffff82111561136d5761136d6112e3565b50601f01601f191660200190565b6000806040838503121561138e57600080fd5b823561139981611281565b9150602083013567ffffffffffffffff8111156113b557600080fd5b8301601f810185136113c657600080fd5b80356113d96113d482611353565b611322565b8181528660208385010111156113ee57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806040838503121561142157600080fd5b823561142c81611281565b946020939093013593505050565b60008060006060848603121561144f57600080fd5b833561145a81611281565b95602085013595506040909401359392505050565b60008060006060848603121561148457600080fd5b833561148f81611281565b9250602084013561149f81611281565b915060408401356114af81611281565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156114e2576114e26114ba565b500390565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b80516005811061158e57600080fd5b919050565b60005b838110156115ae578181015183820152602001611596565b838111156109555750506000910152565b600082601f8301126115d057600080fd5b81516115de6113d482611353565b8181528460208386010111156115f357600080fd5b610b26826020830160208701611593565b805161158e81611281565b60006020828403121561162157600080fd5b815167ffffffffffffffff8082111561163957600080fd5b9083019060c0828603121561164d57600080fd5b6116556112f9565b61165e8361157f565b8152602083015160208201526040830151604082015260608301518281111561168657600080fd5b611692878286016115bf565b6060830152506116a460808401611604565b608082015260a0830151828111156116bb57600080fd5b6116c7878286016115bf565b60a08301525095945050505050565b80516001600160801b038116811461158e57600080fd5b6000602082840312156116ff57600080fd5b815167ffffffffffffffff8082111561171757600080fd5b9083019060c0828603121561172b57600080fd5b6117336112f9565b8251815260208301518281111561174957600080fd5b611755878286016115bf565b60208301525061176760408401611604565b604082015260608301518281111561177e57600080fd5b61178a878286016115bf565b60608301525061179c608084016116d6565b60808201526117ad60a084016116d6565b60a082015295945050505050565b60008160001904831182151516156117d5576117d56114ba565b500290565b6000826117f757634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600a90820152696164647265737328302960b01b604082015260600190565b60008219821115611868576118686114ba565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516118ca818460208701611593565b9190910192915050565b60208152600082518060208401526118f3816040850160208701611593565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e2f27e565bc3f67ff00bfa42c104429a80bbc553fd7afa2ef194b20d2c1a8ca764736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100e75760003560e01c8063b6e1b3e91161008a578063cdd7b38a11610059578063cdd7b38a14610268578063d080bf2714610288578063f2fde38b146102a8578063f340fa01146102c857600080fd5b8063b6e1b3e9146101e8578063b74795d914610208578063c0c53b8b14610228578063cda08c161461024857600080fd5b80634f1ef286116100c65780634f1ef2861461016e57806361d2be2e14610181578063715018a6146101a15780638da5cb5b146101b657600080fd5b8062f714ce146100ec5780633659cfe61461010e5780633cfba0e31461012e575b600080fd5b3480156100f857600080fd5b5061010c610107366004611296565b6102db565b005b34801561011a57600080fd5b5061010c6101293660046112c6565b6103af565b34801561013a57600080fd5b5061015b6101493660046112c6565b60fe6020526000908152604090205481565b6040519081526020015b60405180910390f35b61010c61017c36600461137b565b610478565b34801561018d57600080fd5b5061015b61019c36600461140e565b610532565b3480156101ad57600080fd5b5061010c61069a565b3480156101c257600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610165565b3480156101f457600080fd5b5061010c61020336600461143a565b6106d0565b34801561021457600080fd5b5060fb546101d0906001600160a01b031681565b34801561023457600080fd5b5061010c61024336600461146f565b6107d8565b34801561025457600080fd5b5061015b6102633660046112c6565b61095b565b34801561027457600080fd5b5060fd546101d0906001600160a01b031681565b34801561029457600080fd5b5060fc546101d0906001600160a01b031681565b3480156102b457600080fd5b5061010c6102c33660046112c6565b610b2e565b61010c6102d63660046112c6565b610bc6565b600260c95414156103335760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260c95533600090815260fe6020526040812080548492906103579084906114d0565b90915550506040518281526001600160a01b0382169033907fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9060200160405180910390a36103a68183610c3c565b5050600160c955565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103f85760405162461bcd60e51b815260040161032a906114e7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661042a610d5a565b6001600160a01b0316146104505760405162461bcd60e51b815260040161032a90611533565b61045981610d88565b6040805160008082526020820190925261047591839190610db2565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104c15760405162461bcd60e51b815260040161032a906114e7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104f3610d5a565b6001600160a01b0316146105195760405162461bcd60e51b815260040161032a90611533565b61052282610d88565b61052e82826001610db2565b5050565b60fd546040516367a44ca360e01b81526001600160a01b03848116600483015260009283929116906367a44ca390602401600060405180830381865afa158015610580573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a8919081019061160f565b60fc54602082015160405163f1eb1a2b60e01b81529293506000926001600160a01b039092169163f1eb1a2b916105e59160040190815260200190565b600060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261062a91908101906116ed565b905080608001516001600160801b031684111561064c57600092505050610694565b6000848260a001516001600160801b031661066791906117bb565b6001600160a01b038716600090815260fe602052604090205490915061068e9082906117da565b93505050505b92915050565b6033546001600160a01b031633146106c45760405162461bcd60e51b815260040161032a906117fc565b6106ce6000610efd565b565b60fb546001600160a01b0316331461072a5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206f7263686573747261746f722063616e2063616c6c207468697300604482015260640161032a565b60005a61073790846114d0565b905060006107453a836117bb565b6001600160a01b038616600090815260fe60205260408120805492935083929091906107729084906114d0565b909155505032600090815260fe602090815260409182902080548401905581518381529081018590526001600160a01b038716917f8df42119868c5e2a521d70014ce6857e311acdcf0669c555b17adf8bb53a313a910160405180910390a25050505050565b600054610100900460ff166107f35760005460ff16156107f7565b303b155b61085a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032a565b600054610100900460ff1615801561087c576000805461ffff19166101011790555b610884610f4f565b61088c610f86565b610894610fbd565b6001600160a01b0384166108ba5760405162461bcd60e51b815260040161032a90611831565b6001600160a01b0383166108e05760405162461bcd60e51b815260040161032a90611831565b6001600160a01b0382166109065760405162461bcd60e51b815260040161032a90611831565b60fb80546001600160a01b038087166001600160a01b03199283161790925560fc805486841690831617905560fd8054928516929091169190911790558015610955576000805461ff00191690555b50505050565b60fd546040516367a44ca360e01b81526001600160a01b03838116600483015260009283929116906367a44ca390602401600060405180830381865afa1580156109a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d1919081019061160f565b60fc54602082015160405163f1eb1a2b60e01b81529293506000926001600160a01b039092169163f1eb1a2b91610a0e9160040190815260200190565b600060405180830381865afa158015610a2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5391908101906116ed565b905080608001516001600160801b03163a1115610aa75760405162461bcd60e51b815260206004820152601260248201527123b0b9903a37b79032bc3832b739b4bb329760711b604482015260640161032a565b60a08101516001600160801b0316610abf813a6117bb565b6001600160a01b038616600090815260fe60205260409020541015610b265760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206574686572206465706f736974656400000000604482015260640161032a565b949350505050565b6033546001600160a01b03163314610b585760405162461bcd60e51b815260040161032a906117fc565b6001600160a01b038116610bbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032a565b61047581610efd565b6001600160a01b038116600090815260fe602052604081208054349290610bee908490611855565b90915550506040513481526001600160a01b0382169033907f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a79060200160405180910390a350565b3b151590565b80471015610c8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161032a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cd9576040519150601f19603f3d011682016040523d82523d6000602084013e610cde565b606091505b5050905080610d555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161032a565b505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146104755760405162461bcd60e51b815260040161032a906117fc565b6000610dbc610d5a565b9050610dc784610fec565b600083511180610dd45750815b15610de557610de38484611091565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610ef657805460ff191660011781556040516001600160a01b0383166024820152610e6490869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611091565b50805460ff19168155610e75610d5a565b6001600160a01b0316826001600160a01b031614610eed5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840161032a565b610ef68561117c565b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610f765760405162461bcd60e51b815260040161032a9061186d565b610f7e6111bc565b6106ce6111e3565b600054610100900460ff16610fad5760405162461bcd60e51b815260040161032a9061186d565b610fb56111bc565b6106ce6111bc565b600054610100900460ff16610fe45760405162461bcd60e51b815260040161032a9061186d565b6106ce611213565b803b6110505760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161032a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6110f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161032a565b600080846001600160a01b03168460405161110b91906118b8565b600060405180830381855af49150503d8060008114611146576040519150601f19603f3d011682016040523d82523d6000602084013e61114b565b606091505b5091509150611173828260405180606001604052806027815260200161190860279139611241565b95945050505050565b61118581610fec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166106ce5760405162461bcd60e51b815260040161032a9061186d565b600054610100900460ff1661120a5760405162461bcd60e51b815260040161032a9061186d565b6106ce33610efd565b600054610100900460ff1661123a5760405162461bcd60e51b815260040161032a9061186d565b600160c955565b6060831561125057508161127a565b8251156112605782518084602001fd5b8160405162461bcd60e51b815260040161032a91906118d4565b9392505050565b6001600160a01b038116811461047557600080fd5b600080604083850312156112a957600080fd5b8235915060208301356112bb81611281565b809150509250929050565b6000602082840312156112d857600080fd5b813561127a81611281565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561131c5761131c6112e3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561134b5761134b6112e3565b604052919050565b600067ffffffffffffffff82111561136d5761136d6112e3565b50601f01601f191660200190565b6000806040838503121561138e57600080fd5b823561139981611281565b9150602083013567ffffffffffffffff8111156113b557600080fd5b8301601f810185136113c657600080fd5b80356113d96113d482611353565b611322565b8181528660208385010111156113ee57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806040838503121561142157600080fd5b823561142c81611281565b946020939093013593505050565b60008060006060848603121561144f57600080fd5b833561145a81611281565b95602085013595506040909401359392505050565b60008060006060848603121561148457600080fd5b833561148f81611281565b9250602084013561149f81611281565b915060408401356114af81611281565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156114e2576114e26114ba565b500390565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b80516005811061158e57600080fd5b919050565b60005b838110156115ae578181015183820152602001611596565b838111156109555750506000910152565b600082601f8301126115d057600080fd5b81516115de6113d482611353565b8181528460208386010111156115f357600080fd5b610b26826020830160208701611593565b805161158e81611281565b60006020828403121561162157600080fd5b815167ffffffffffffffff8082111561163957600080fd5b9083019060c0828603121561164d57600080fd5b6116556112f9565b61165e8361157f565b8152602083015160208201526040830151604082015260608301518281111561168657600080fd5b611692878286016115bf565b6060830152506116a460808401611604565b608082015260a0830151828111156116bb57600080fd5b6116c7878286016115bf565b60a08301525095945050505050565b80516001600160801b038116811461158e57600080fd5b6000602082840312156116ff57600080fd5b815167ffffffffffffffff8082111561171757600080fd5b9083019060c0828603121561172b57600080fd5b6117336112f9565b8251815260208301518281111561174957600080fd5b611755878286016115bf565b60208301525061176760408401611604565b604082015260608301518281111561177e57600080fd5b61178a878286016115bf565b60608301525061179c608084016116d6565b60808201526117ad60a084016116d6565b60a082015295945050505050565b60008160001904831182151516156117d5576117d56114ba565b500290565b6000826117f757634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600a90820152696164647265737328302960b01b604082015260600190565b60008219821115611868576118686114ba565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516118ca818460208701611593565b9190910192915050565b60208152600082518060208401526118f3816040850160208701611593565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e2f27e565bc3f67ff00bfa42c104429a80bbc553fd7afa2ef194b20d2c1a8ca764736f6c634300080c0033",
  "devdoc": {
    "details": "vault for storing gas for each strategy. Nodes must still pay gas cost to call, but execution costs  will come out of the gas account.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deposit(address)": {
        "details": "Deposit more eth to be used in jobs.      Can only be withdrawn by governance and the given vault,      so in most cases these funds are unretrievable.",
        "params": {
          "targetAddress": "address of the recipient of these gas funds"
        }
      },
      "gasAvailableForTransaction(address)": {
        "details": "Orchestrator calls this function in order to reimburse tx.origin for method gas.      First it checks that all parameters are correct (gas price isn't too high),      And then it returns as much gas as is available to use in the transaction.      Note that this function will revert if the gas price is too high for the strategy.      This should be checked by the keeper beforehand.",
        "params": {
          "_targetAddress": "Address actions will be performed on, and address paying gas for those actions."
        },
        "returns": {
          "_0": "gasAvailable (representing amount of gas available per Method)."
        }
      },
      "initialize(address,address,address)": {
        "details": "Permanently sets related addresses",
        "params": {
          "_orchestrator": "Address of the orchestrator contract",
          "_stratRegistry": "Address of the strategy registry contract",
          "_vaultRegistry": "Address of the vault registry contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reimburseGas(address,uint256,bytes32)": {
        "details": "Note that keepers still have to pull their gas from the GasVault in order      to truly be reimbursed--until then the ETH is just sitting in the GasVault.",
        "params": {
          "jobHash": "The hash of the job which was performed.                All vaults other than DynamicJobs can only have one job,                so in this case jobHash will just be actionHash.",
          "originalGas": "How much gas there was at the start of the action (before any action was called)",
          "targetAddress": "The address which the action was performed upon.                      The reimbursement will come from its gas fund."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transactionsRemaining(address,uint256)": {
        "params": {
          "highGasEstimate": "An estimate of the highest reasonable gas price which                        a transaction will cost, in terms of wei.                        In other words, given a bad gas price,                        how many more times can a strategy be run.",
          "targetAddress": "The address of the vault in question"
        },
        "returns": {
          "_0": "transactions Remaining, assuming upper limit estimate of gas price                      is used for the transaction"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256,address)": {
        "details": "Normal withdraw function, normally used by keepers",
        "params": {
          "amount": "The amount to withdraw",
          "to": "Address to send the ether to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ethBalances(address)": {
        "notice": "Mapping from vault address to gasInfo"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4834,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4837,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8682,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4816,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5011,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5139,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 5182,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13265,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "orchestrator",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IOrchestrator)17883"
      },
      {
        "astId": 13268,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "strategyRegistry",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IStrategyRegistry)18321"
      },
      {
        "astId": 13271,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "vaultRegistry",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IVaultRegistry)18512"
      },
      {
        "astId": 13276,
        "contract": "contracts/GasVault.sol:GasVault",
        "label": "ethBalances",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOrchestrator)17883": {
        "encoding": "inplace",
        "label": "contract IOrchestrator",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategyRegistry)18321": {
        "encoding": "inplace",
        "label": "contract IStrategyRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultRegistry)18512": {
        "encoding": "inplace",
        "label": "contract IVaultRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}